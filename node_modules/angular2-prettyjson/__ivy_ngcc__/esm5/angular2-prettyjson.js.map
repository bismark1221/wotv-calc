{"version":3,"file":"angular2-prettyjson.js","sources":["../../src/prettyjson.component.ts","../../src/safe.util.ts","../../src/prettyjson.pipe.ts","../../src/json.pipe.ts","../../src/prettyjson.module.ts"],"names":["circularSerializer","serializer"],"mappings":"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","sourcesContent":["import {Component, Input} from \"@angular/core\";\n\n@Component({\n  selector: \"prettyjson\",\n  styles: [\n    `pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\n    :host >>> span {white-space: normal;}\n    :host >>> .string { color: green; }\n    :host >>> .number { color: darkorange; }\n    :host >>> .boolean { color: blue; }\n    :host >>> .null { color: magenta; }\n    :host >>> .key { color: red; }`\n  ],\n  template: `\n    <pre [innerHtml]=\"obj | prettyjson\">\n    </pre>\n  `,\n})\nexport class PrettyJsonComponent {\n  @Input() public obj: any;\n}\n","// Taken from github.com/isaacs/json-stringify-safe\nexport function serializer() {\n  const stack: any[] = [];\n  const keys: string[] = [];\n\n  const cycleReplacer = function(key: string, value: any) {\n    if (stack[0] === value) {\n      return \"[Circular ~]\";\n    }\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n  };\n\n  return function(this: any, key: string, value: any) {\n    if (stack.length > 0) {\n      const thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) {\n        value = cycleReplacer.call(this, key, value);\n      }\n    } else {\n      stack.push(value);\n    }\n\n    return value;\n  };\n}\n","import {Pipe, PipeTransform} from \"@angular/core\";\nimport {serializer as circularSerializer} from \"./safe.util\";\n\n@Pipe({\n  name: \"prettyjson\",\n  pure: false\n})\nexport class PrettyJsonPipe implements PipeTransform {\n  public transform(obj: any, spaces = 2): string {\n    return this._syntaxHighlight(obj, circularSerializer(), spaces);\n  }\n\n  private _syntaxHighlight(json: any, serializer: any, spacing: number): string {\n    if (json === undefined) {\n        return '<span class=\"undefined\"></span>';\n    }\n    // Credits to the accepted answer here\n    // http://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript\n    if (typeof json !== \"string\") {\n      json = JSON.stringify(json, serializer, spacing);\n    }\n    json = json.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, (match: any) => {\n        let cls = \"number\";\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = \"key\";\n            } else {\n                cls = \"string\";\n            }\n        } else if (/true|false/.test(match)) {\n            cls = \"boolean\";\n        } else if (/null/.test(match)) {\n            cls = \"null\";\n        }\n        return `<span class=\"${cls}\">${match}</span>`;\n    });\n  }\n}\n","import {Pipe, PipeTransform} from \"@angular/core\";\nimport {serializer} from \"./safe.util\";\n\n@Pipe({\n  name: \"json\",\n  pure: false\n})\nexport class SafeJsonPipe implements PipeTransform {\n  public transform(obj: any, spaces: number= 2): string {\n    return JSON.stringify(obj, serializer(), spaces);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {PrettyJsonComponent} from './prettyjson.component';\nimport {PrettyJsonPipe} from './prettyjson.pipe';\nimport {SafeJsonPipe} from './json.pipe';\n\n@NgModule({\n    declarations: [\n        PrettyJsonComponent,\n        PrettyJsonPipe,\n        SafeJsonPipe\n    ],\n    exports: [\n        PrettyJsonComponent,\n        PrettyJsonPipe,\n        SafeJsonPipe\n    ]\n})\nexport class PrettyJsonModule {\n\n}\n"]}