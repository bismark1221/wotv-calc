(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?factory(exports,require("@angular/core"),require("@angular/platform-browser"),require("ngx-window-token/index"),require("@angular/common")):typeof define==="function"&&define.amd?define(["exports","@angular/core","@angular/platform-browser","ngx-window-token/index","@angular/common"],factory):factory((global.ngx=global.ngx||{},global.ngx.clipboard=global.ngx.clipboard||{}),global.ng.core,global._angular_platformBrowser,global.ngxWindowToken_index,global.ng.common)})(this,function(exports,_angular_core,_angular_platformBrowser,ngxWindowToken_index,_angular_common){"use strict";var ClipboardService=function(){function ClipboardService(document,window){this.document=document;this.window=window}Object.defineProperty(ClipboardService.prototype,"isSupported",{get:function(){return!!this.document.queryCommandSupported&&!!this.document.queryCommandSupported("copy")},enumerable:true,configurable:true});ClipboardService.prototype.isTargetValid=function(element){if(element instanceof HTMLInputElement||element instanceof HTMLTextAreaElement){if(element.hasAttribute("disabled")){throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute')}return true}throw new Error("Target should be input or textarea")};ClipboardService.prototype.copyFromInputElement=function(targetElm,renderer){try{this.selectTarget(targetElm,renderer);var re=this.copyText();this.clearSelection(targetElm,this.window);return re}catch(error){return false}};ClipboardService.prototype.copyFromContent=function(content,renderer){if(!this.tempTextArea){this.tempTextArea=this.createTempTextArea(this.document,this.window);this.document.body.appendChild(this.tempTextArea)}this.tempTextArea.value=content;return this.copyFromInputElement(this.tempTextArea,renderer)};ClipboardService.prototype.destroy=function(){if(this.tempTextArea){this.document.body.removeChild(this.tempTextArea);this.tempTextArea=undefined}};ClipboardService.prototype.selectTarget=function(inputElement,renderer){renderer.invokeElementMethod(inputElement,"select");renderer.invokeElementMethod(inputElement,"setSelectionRange",[0,inputElement.value.length]);return inputElement.value.length};ClipboardService.prototype.copyText=function(){return this.document.execCommand("copy")};ClipboardService.prototype.clearSelection=function(inputElement,window){inputElement&&inputElement.blur();window.getSelection().removeAllRanges()};ClipboardService.prototype.createTempTextArea=function(doc,window){var isRTL=doc.documentElement.getAttribute("dir")==="rtl";var ta;ta=doc.createElement("textarea");ta.style.fontSize="12pt";ta.style.border="0";ta.style.padding="0";ta.style.margin="0";ta.style.position="absolute";ta.style[isRTL?"right":"left"]="-9999px";var yPosition=window.pageYOffset||doc.documentElement.scrollTop;ta.style.top=yPosition+"px";ta.setAttribute("readonly","");return ta};ClipboardService.decorators=[{type:_angular_core.Injectable}];ClipboardService.ctorParameters=function(){return[{type:undefined,decorators:[{type:_angular_core.Inject,args:[_angular_platformBrowser.DOCUMENT]}]},{type:undefined,decorators:[{type:_angular_core.Inject,args:[ngxWindowToken_index.WINDOW]}]}]};return ClipboardService}();function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc,win,parentDispatcher){return parentDispatcher||new ClipboardService(doc,win)}var CLIPBOARD_SERVICE_PROVIDER={provide:ClipboardService,deps:[_angular_platformBrowser.DOCUMENT,ngxWindowToken_index.WINDOW,[new _angular_core.Optional,new _angular_core.SkipSelf,ClipboardService]],useFactory:CLIPBOARD_SERVICE_PROVIDER_FACTORY};var ClipboardDirective=function(){function ClipboardDirective(clipboardSrv,renderer){this.clipboardSrv=clipboardSrv;this.renderer=renderer;this.cbOnSuccess=new _angular_core.EventEmitter;this.cbOnError=new _angular_core.EventEmitter}ClipboardDirective.prototype.ngOnInit=function(){};ClipboardDirective.prototype.ngOnDestroy=function(){this.clipboardSrv.destroy()};ClipboardDirective.prototype.onClick=function(){if(!this.clipboardSrv.isSupported){this.handleResult(false,undefined)}else if(this.targetElm&&this.clipboardSrv.isTargetValid(this.targetElm)){this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm,this.renderer),this.targetElm.value)}else if(this.cbContent){this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent,this.renderer),this.cbContent)}};ClipboardDirective.prototype.handleResult=function(succeeded,copiedContent){if(succeeded){this.cbOnSuccess.emit({isSuccess:true,content:copiedContent})}else{this.cbOnError.emit({isSuccess:false})}};ClipboardDirective.decorators=[{type:_angular_core.Directive,args:[{selector:"[ngxClipboard]"}]}];ClipboardDirective.ctorParameters=function(){return[{type:ClipboardService},{type:_angular_core.Renderer}]};ClipboardDirective.propDecorators={targetElm:[{type:_angular_core.Input,args:["ngxClipboard"]}],cbContent:[{type:_angular_core.Input}],cbOnSuccess:[{type:_angular_core.Output}],cbOnError:[{type:_angular_core.Output}],onClick:[{type:_angular_core.HostListener,args:["click",["$event.target"]]}]};return ClipboardDirective}();var ClipboardModule=function(){function ClipboardModule(){}ClipboardModule.decorators=[{type:_angular_core.NgModule,args:[{imports:[_angular_common.CommonModule,ngxWindowToken_index.WindowTokenModule],declarations:[ClipboardDirective],exports:[ClipboardDirective],providers:[CLIPBOARD_SERVICE_PROVIDER]}]}];ClipboardModule.ctorParameters=function(){return[]};return ClipboardModule}();exports.ClipboardModule=ClipboardModule;exports.ClipboardDirective=ClipboardDirective;exports.ClipboardService=ClipboardService;Object.defineProperty(exports,"__esModule",{value:true})});