import { Observable } from 'rxjs';
import { ClipboardParams, IClipboardResponse } from './interface';
/**
 * The following code is heavily copied from https://github.com/zenorocha/clipboard.js
 */
import * as ɵngcc0 from '@angular/core';
export declare class ClipboardService {
    document: any;
    private window;
    private copySubject;
    copyResponse$: Observable<IClipboardResponse>;
    private tempTextArea;
    private config;
    constructor(document: any, window: any);
    configure(config: ClipboardParams): void;
    copy(content: string): void;
    get isSupported(): boolean;
    isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean;
    /**
     * Attempts to copy from an input `targetElm`
     */
    copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus?: boolean): boolean;
    /**
     * This is a hack for IE11 to return `true` even if copy fails.
     */
    isCopySuccessInIE11(): boolean;
    /**
     * Creates a fake textarea element, sets its value from `text` property,
     * and makes a selection on it.
     */
    copyFromContent(content: string, container?: HTMLElement): boolean;
    /**
     * Remove temporary textarea if any exists.
     */
    destroy(container?: HTMLElement): void;
    /**
     * Select the target html input element.
     */
    private selectTarget;
    private copyText;
    /**
     * Moves focus away from `target` and back to the trigger, removes current selection.
     */
    private clearSelection;
    /**
     * Creates a fake textarea for copy command.
     */
    private createTempTextArea;
    /**
     * Pushes copy operation response to copySubject, to provide global access
     * to the response.
     */
    pushCopyResponse(response: IClipboardResponse): void;
    /**
     * @deprecated use pushCopyResponse instead.
     */
    pushCopyReponse(response: IClipboardResponse): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClipboardService, [null, { optional: true; }]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNsaXBib2FyZC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1jbGlwYm9hcmQuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDbGlwYm9hcmRQYXJhbXMsIElDbGlwYm9hcmRSZXNwb25zZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcclxuLyoqXHJcbiAqIFRoZSBmb2xsb3dpbmcgY29kZSBpcyBoZWF2aWx5IGNvcGllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5vcm9jaGEvY2xpcGJvYXJkLmpzXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbGlwYm9hcmRTZXJ2aWNlIHtcclxuICAgIGRvY3VtZW50OiBhbnk7XHJcbiAgICBwcml2YXRlIHdpbmRvdztcclxuICAgIHByaXZhdGUgY29weVN1YmplY3Q7XHJcbiAgICBjb3B5UmVzcG9uc2UkOiBPYnNlcnZhYmxlPElDbGlwYm9hcmRSZXNwb25zZT47XHJcbiAgICBwcml2YXRlIHRlbXBUZXh0QXJlYTtcclxuICAgIHByaXZhdGUgY29uZmlnO1xyXG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IGFueSwgd2luZG93OiBhbnkpO1xyXG4gICAgY29uZmlndXJlKGNvbmZpZzogQ2xpcGJvYXJkUGFyYW1zKTogdm9pZDtcclxuICAgIGNvcHkoY29udGVudDogc3RyaW5nKTogdm9pZDtcclxuICAgIGdldCBpc1N1cHBvcnRlZCgpOiBib29sZWFuO1xyXG4gICAgaXNUYXJnZXRWYWxpZChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEF0dGVtcHRzIHRvIGNvcHkgZnJvbSBhbiBpbnB1dCBgdGFyZ2V0RWxtYFxyXG4gICAgICovXHJcbiAgICBjb3B5RnJvbUlucHV0RWxlbWVudCh0YXJnZXRFbG06IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50LCBpc0ZvY3VzPzogYm9vbGVhbik6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgaXMgYSBoYWNrIGZvciBJRTExIHRvIHJldHVybiBgdHJ1ZWAgZXZlbiBpZiBjb3B5IGZhaWxzLlxyXG4gICAgICovXHJcbiAgICBpc0NvcHlTdWNjZXNzSW5JRTExKCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBmYWtlIHRleHRhcmVhIGVsZW1lbnQsIHNldHMgaXRzIHZhbHVlIGZyb20gYHRleHRgIHByb3BlcnR5LFxyXG4gICAgICogYW5kIG1ha2VzIGEgc2VsZWN0aW9uIG9uIGl0LlxyXG4gICAgICovXHJcbiAgICBjb3B5RnJvbUNvbnRlbnQoY29udGVudDogc3RyaW5nLCBjb250YWluZXI/OiBIVE1MRWxlbWVudCk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSB0ZW1wb3JhcnkgdGV4dGFyZWEgaWYgYW55IGV4aXN0cy5cclxuICAgICAqL1xyXG4gICAgZGVzdHJveShjb250YWluZXI/OiBIVE1MRWxlbWVudCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFNlbGVjdCB0aGUgdGFyZ2V0IGh0bWwgaW5wdXQgZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RUYXJnZXQ7XHJcbiAgICBwcml2YXRlIGNvcHlUZXh0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3ZlcyBmb2N1cyBhd2F5IGZyb20gYHRhcmdldGAgYW5kIGJhY2sgdG8gdGhlIHRyaWdnZXIsIHJlbW92ZXMgY3VycmVudCBzZWxlY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2xlYXJTZWxlY3Rpb247XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBmYWtlIHRleHRhcmVhIGZvciBjb3B5IGNvbW1hbmQuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlVGVtcFRleHRBcmVhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoZXMgY29weSBvcGVyYXRpb24gcmVzcG9uc2UgdG8gY29weVN1YmplY3QsIHRvIHByb3ZpZGUgZ2xvYmFsIGFjY2Vzc1xyXG4gICAgICogdG8gdGhlIHJlc3BvbnNlLlxyXG4gICAgICovXHJcbiAgICBwdXNoQ29weVJlc3BvbnNlKHJlc3BvbnNlOiBJQ2xpcGJvYXJkUmVzcG9uc2UpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2UgcHVzaENvcHlSZXNwb25zZSBpbnN0ZWFkLlxyXG4gICAgICovXHJcbiAgICBwdXNoQ29weVJlcG9uc2UocmVzcG9uc2U6IElDbGlwYm9hcmRSZXNwb25zZSk6IHZvaWQ7XHJcbn1cclxuIl19