import { OnDestroy, OnChanges, AfterViewInit, ChangeDetectorRef, EventEmitter, TemplateRef, ElementRef, SimpleChanges, QueryList, InjectionToken } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subject } from 'rxjs';
import { ConsoleService } from './console.service';
import { ItemsList } from './items-list';
import { NgOption } from './ng-select.types';
import { NgDropdownPanelComponent } from './ng-dropdown-panel.component';
import { NgOptionComponent } from './ng-option.component';
import { SelectionModelFactory } from './selection-model';
import { NgSelectConfig } from './config.service';
import * as ɵngcc0 from '@angular/core';
export declare const SELECTION_MODEL_FACTORY: InjectionToken<SelectionModelFactory>;
export declare type DropdownPosition = 'bottom' | 'top' | 'auto';
export declare type AddTagFn = ((term: string) => any | Promise<any>);
export declare type CompareWithFn = (a: any, b: any) => boolean;
export declare type GroupValueFn = (key: string | object, children: any[]) => string | object;
export declare class NgSelectComponent implements OnDestroy, OnChanges, AfterViewInit, ControlValueAccessor {
    classes: string;
    private autoFocus;
    private _cd;
    private _console;
    bindLabel: string;
    bindValue: string;
    markFirst: boolean;
    placeholder: string;
    notFoundText: string;
    typeToSearchText: string;
    addTagText: string;
    loadingText: string;
    clearAllText: string;
    appearance: string;
    dropdownPosition: DropdownPosition;
    appendTo: string;
    loading: boolean;
    closeOnSelect: boolean;
    hideSelected: boolean;
    selectOnTab: boolean;
    openOnEnter: boolean;
    maxSelectedItems: number;
    groupBy: string | Function;
    groupValue: GroupValueFn;
    bufferAmount: number;
    virtualScroll: boolean;
    selectableGroup: boolean;
    selectableGroupAsModel: boolean;
    searchFn: any;
    trackByFn: any;
    clearOnBackspace: boolean;
    labelForId: any;
    inputAttrs: {
        [key: string]: string;
    };
    tabIndex: number;
    readonly: boolean;
    searchWhileComposing: boolean;
    minTermLength: number;
    editableSearchTerm: boolean;
    keyDownFn: (_: KeyboardEvent) => boolean;
    typeahead: Subject<string>;
    multiple: boolean;
    addTag: boolean | AddTagFn;
    searchable: boolean;
    clearable: boolean;
    isOpen: boolean;
    get items(): any[];
    set items(value: any[]);
    get compareWith(): CompareWithFn;
    set compareWith(fn: CompareWithFn);
    get clearSearchOnAdd(): boolean;
    set clearSearchOnAdd(value: boolean);
    blurEvent: EventEmitter<any>;
    focusEvent: EventEmitter<any>;
    changeEvent: EventEmitter<any>;
    openEvent: EventEmitter<any>;
    closeEvent: EventEmitter<any>;
    searchEvent: EventEmitter<{
        term: string;
        items: any[];
    }>;
    clearEvent: EventEmitter<any>;
    addEvent: EventEmitter<any>;
    removeEvent: EventEmitter<any>;
    scroll: EventEmitter<{
        start: number;
        end: number;
    }>;
    scrollToEnd: EventEmitter<any>;
    optionTemplate: TemplateRef<any>;
    optgroupTemplate: TemplateRef<any>;
    labelTemplate: TemplateRef<any>;
    multiLabelTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    notFoundTemplate: TemplateRef<any>;
    typeToSearchTemplate: TemplateRef<any>;
    loadingTextTemplate: TemplateRef<any>;
    tagTemplate: TemplateRef<any>;
    loadingSpinnerTemplate: TemplateRef<any>;
    dropdownPanel: NgDropdownPanelComponent;
    searchInput: ElementRef<HTMLInputElement>;
    ngOptions: QueryList<NgOptionComponent>;
    get disabled(): boolean;
    get filtered(): boolean;
    itemsList: ItemsList;
    viewPortItems: NgOption[];
    searchTerm: string;
    dropdownId: string;
    element: HTMLElement;
    focused: boolean;
    escapeHTML: boolean;
    useDefaultClass: boolean;
    private _items;
    private _itemsAreUsed;
    private _defaultLabel;
    private _primitive;
    private _manualOpen;
    private _disabled;
    private _pressedKeys;
    private _compareWith;
    private _clearSearchOnAdd;
    private _isComposing;
    private get _editableSearchTerm();
    private readonly _destroy$;
    private readonly _keyPress$;
    private _onChange;
    private _onTouched;
    clearItem: (item: any) => void;
    constructor(classes: string, autoFocus: any, config: NgSelectConfig, newSelectionModel: SelectionModelFactory, _elementRef: ElementRef<HTMLElement>, _cd: ChangeDetectorRef, _console: ConsoleService);
    get selectedItems(): NgOption[];
    get selectedValues(): (string | Object)[];
    get hasValue(): boolean;
    get currentPanelPosition(): DropdownPosition;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    handleKeyDown($event: KeyboardEvent): void;
    handleKeyCode($event: KeyboardEvent): void;
    handleMousedown($event: MouseEvent): void;
    handleArrowClick(): void;
    handleClearClick(): void;
    clearModel(): void;
    writeValue(value: any | any[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(state: boolean): void;
    toggle(): void;
    open(): void;
    close(): void;
    toggleItem(item: NgOption): void;
    select(item: NgOption): void;
    focus(): void;
    blur(): void;
    unselect(item: NgOption): void;
    selectTag(): void;
    showClear(): boolean;
    trackByOption: (_: number, item: NgOption) => any;
    get showAddTag(): boolean;
    showNoItemsFound(): boolean;
    showTypeToSearch(): boolean;
    onCompositionStart(): void;
    onCompositionEnd(term: string): void;
    filter(term: string): void;
    onInputFocus($event: any): void;
    onInputBlur($event: any): void;
    onItemHover(item: NgOption): void;
    detectChanges(): void;
    private _setSearchTermFromItems;
    private _setItems;
    private _setItemsFromNgOptions;
    private _isValidWriteValue;
    private _handleWriteValue;
    private _handleKeyPresses;
    private _setInputAttributes;
    private _updateNgModel;
    private _clearSearch;
    private _changeSearch;
    private _scrollToMarked;
    private _scrollToTag;
    private _onSelectionChanged;
    private _handleTab;
    private _handleEnter;
    private _handleSpace;
    private _handleArrowDown;
    private _handleArrowUp;
    private _nextItemIsTag;
    private _handleBackspace;
    private get _isTypeahead();
    private get _validTerm();
    private _mergeGlobalConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgSelectComponent, [{ attribute: "class"; }, { attribute: "autofocus"; }, null, null, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgSelectComponent, "ng-select", never, { "markFirst": "markFirst"; "dropdownPosition": "dropdownPosition"; "loading": "loading"; "closeOnSelect": "closeOnSelect"; "hideSelected": "hideSelected"; "selectOnTab": "selectOnTab"; "bufferAmount": "bufferAmount"; "selectableGroup": "selectableGroup"; "selectableGroupAsModel": "selectableGroupAsModel"; "searchFn": "searchFn"; "trackByFn": "trackByFn"; "clearOnBackspace": "clearOnBackspace"; "labelForId": "labelForId"; "inputAttrs": "inputAttrs"; "readonly": "readonly"; "searchWhileComposing": "searchWhileComposing"; "minTermLength": "minTermLength"; "editableSearchTerm": "editableSearchTerm"; "keyDownFn": "keyDownFn"; "multiple": "multiple"; "addTag": "addTag"; "searchable": "searchable"; "clearable": "clearable"; "isOpen": "isOpen"; "items": "items"; "compareWith": "compareWith"; "clearSearchOnAdd": "clearSearchOnAdd"; "bindLabel": "bindLabel"; "placeholder": "placeholder"; "notFoundText": "notFoundText"; "typeToSearchText": "typeToSearchText"; "addTagText": "addTagText"; "loadingText": "loadingText"; "clearAllText": "clearAllText"; "virtualScroll": "virtualScroll"; "openOnEnter": "openOnEnter"; "appendTo": "appendTo"; "bindValue": "bindValue"; "appearance": "appearance"; "maxSelectedItems": "maxSelectedItems"; "groupBy": "groupBy"; "groupValue": "groupValue"; "tabIndex": "tabIndex"; "typeahead": "typeahead"; }, { "blurEvent": "blur"; "focusEvent": "focus"; "changeEvent": "change"; "openEvent": "open"; "closeEvent": "close"; "searchEvent": "search"; "clearEvent": "clear"; "addEvent": "add"; "removeEvent": "remove"; "scroll": "scroll"; "scrollToEnd": "scrollToEnd"; }, ["optionTemplate", "optgroupTemplate", "labelTemplate", "multiLabelTemplate", "headerTemplate", "footerTemplate", "notFoundTemplate", "typeToSearchTemplate", "loadingTextTemplate", "tagTemplate", "loadingSpinnerTemplate", "ngOptions"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2VsZWN0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1zZWxlY3QuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIFF1ZXJ5TGlzdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29uc29sZVNlcnZpY2UgfSBmcm9tICcuL2NvbnNvbGUuc2VydmljZSc7XG5pbXBvcnQgeyBJdGVtc0xpc3QgfSBmcm9tICcuL2l0ZW1zLWxpc3QnO1xuaW1wb3J0IHsgTmdPcHRpb24gfSBmcm9tICcuL25nLXNlbGVjdC50eXBlcyc7XG5pbXBvcnQgeyBOZ0Ryb3Bkb3duUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL25nLWRyb3Bkb3duLXBhbmVsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ09wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vbmctb3B0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWxlY3Rpb25Nb2RlbEZhY3RvcnkgfSBmcm9tICcuL3NlbGVjdGlvbi1tb2RlbCc7XG5pbXBvcnQgeyBOZ1NlbGVjdENvbmZpZyB9IGZyb20gJy4vY29uZmlnLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgU0VMRUNUSU9OX01PREVMX0ZBQ1RPUlk6IEluamVjdGlvblRva2VuPFNlbGVjdGlvbk1vZGVsRmFjdG9yeT47XG5leHBvcnQgZGVjbGFyZSB0eXBlIERyb3Bkb3duUG9zaXRpb24gPSAnYm90dG9tJyB8ICd0b3AnIHwgJ2F1dG8nO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBBZGRUYWdGbiA9ICgodGVybTogc3RyaW5nKSA9PiBhbnkgfCBQcm9taXNlPGFueT4pO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBDb21wYXJlV2l0aEZuID0gKGE6IGFueSwgYjogYW55KSA9PiBib29sZWFuO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBHcm91cFZhbHVlRm4gPSAoa2V5OiBzdHJpbmcgfCBvYmplY3QsIGNoaWxkcmVuOiBhbnlbXSkgPT4gc3RyaW5nIHwgb2JqZWN0O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdTZWxlY3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIGNsYXNzZXM6IHN0cmluZztcbiAgICBwcml2YXRlIGF1dG9Gb2N1cztcbiAgICBwcml2YXRlIF9jZDtcbiAgICBwcml2YXRlIF9jb25zb2xlO1xuICAgIGJpbmRMYWJlbDogc3RyaW5nO1xuICAgIGJpbmRWYWx1ZTogc3RyaW5nO1xuICAgIG1hcmtGaXJzdDogYm9vbGVhbjtcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIG5vdEZvdW5kVGV4dDogc3RyaW5nO1xuICAgIHR5cGVUb1NlYXJjaFRleHQ6IHN0cmluZztcbiAgICBhZGRUYWdUZXh0OiBzdHJpbmc7XG4gICAgbG9hZGluZ1RleHQ6IHN0cmluZztcbiAgICBjbGVhckFsbFRleHQ6IHN0cmluZztcbiAgICBhcHBlYXJhbmNlOiBzdHJpbmc7XG4gICAgZHJvcGRvd25Qb3NpdGlvbjogRHJvcGRvd25Qb3NpdGlvbjtcbiAgICBhcHBlbmRUbzogc3RyaW5nO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgY2xvc2VPblNlbGVjdDogYm9vbGVhbjtcbiAgICBoaWRlU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgc2VsZWN0T25UYWI6IGJvb2xlYW47XG4gICAgb3Blbk9uRW50ZXI6IGJvb2xlYW47XG4gICAgbWF4U2VsZWN0ZWRJdGVtczogbnVtYmVyO1xuICAgIGdyb3VwQnk6IHN0cmluZyB8IEZ1bmN0aW9uO1xuICAgIGdyb3VwVmFsdWU6IEdyb3VwVmFsdWVGbjtcbiAgICBidWZmZXJBbW91bnQ6IG51bWJlcjtcbiAgICB2aXJ0dWFsU2Nyb2xsOiBib29sZWFuO1xuICAgIHNlbGVjdGFibGVHcm91cDogYm9vbGVhbjtcbiAgICBzZWxlY3RhYmxlR3JvdXBBc01vZGVsOiBib29sZWFuO1xuICAgIHNlYXJjaEZuOiBhbnk7XG4gICAgdHJhY2tCeUZuOiBhbnk7XG4gICAgY2xlYXJPbkJhY2tzcGFjZTogYm9vbGVhbjtcbiAgICBsYWJlbEZvcklkOiBhbnk7XG4gICAgaW5wdXRBdHRyczoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIHNlYXJjaFdoaWxlQ29tcG9zaW5nOiBib29sZWFuO1xuICAgIG1pblRlcm1MZW5ndGg6IG51bWJlcjtcbiAgICBlZGl0YWJsZVNlYXJjaFRlcm06IGJvb2xlYW47XG4gICAga2V5RG93bkZuOiAoXzogS2V5Ym9hcmRFdmVudCkgPT4gYm9vbGVhbjtcbiAgICB0eXBlYWhlYWQ6IFN1YmplY3Q8c3RyaW5nPjtcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBhZGRUYWc6IGJvb2xlYW4gfCBBZGRUYWdGbjtcbiAgICBzZWFyY2hhYmxlOiBib29sZWFuO1xuICAgIGNsZWFyYWJsZTogYm9vbGVhbjtcbiAgICBpc09wZW46IGJvb2xlYW47XG4gICAgZ2V0IGl0ZW1zKCk6IGFueVtdO1xuICAgIHNldCBpdGVtcyh2YWx1ZTogYW55W10pO1xuICAgIGdldCBjb21wYXJlV2l0aCgpOiBDb21wYXJlV2l0aEZuO1xuICAgIHNldCBjb21wYXJlV2l0aChmbjogQ29tcGFyZVdpdGhGbik7XG4gICAgZ2V0IGNsZWFyU2VhcmNoT25BZGQoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xlYXJTZWFyY2hPbkFkZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgYmx1ckV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmb2N1c0V2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjaGFuZ2VFdmVudDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb3BlbkV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjbG9zZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzZWFyY2hFdmVudDogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgdGVybTogc3RyaW5nO1xuICAgICAgICBpdGVtczogYW55W107XG4gICAgfT47XG4gICAgY2xlYXJFdmVudDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWRkRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlbW92ZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzY3JvbGw6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIHN0YXJ0OiBudW1iZXI7XG4gICAgICAgIGVuZDogbnVtYmVyO1xuICAgIH0+O1xuICAgIHNjcm9sbFRvRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvcHRpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBvcHRncm91cFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGxhYmVsVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgbXVsdGlMYWJlbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGZvb3RlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG5vdEZvdW5kVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdHlwZVRvU2VhcmNoVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgbG9hZGluZ1RleHRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB0YWdUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBsb2FkaW5nU3Bpbm5lclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGRyb3Bkb3duUGFuZWw6IE5nRHJvcGRvd25QYW5lbENvbXBvbmVudDtcbiAgICBzZWFyY2hJbnB1dDogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PjtcbiAgICBuZ09wdGlvbnM6IFF1ZXJ5TGlzdDxOZ09wdGlvbkNvbXBvbmVudD47XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IGZpbHRlcmVkKCk6IGJvb2xlYW47XG4gICAgaXRlbXNMaXN0OiBJdGVtc0xpc3Q7XG4gICAgdmlld1BvcnRJdGVtczogTmdPcHRpb25bXTtcbiAgICBzZWFyY2hUZXJtOiBzdHJpbmc7XG4gICAgZHJvcGRvd25JZDogc3RyaW5nO1xuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIGZvY3VzZWQ6IGJvb2xlYW47XG4gICAgZXNjYXBlSFRNTDogYm9vbGVhbjtcbiAgICB1c2VEZWZhdWx0Q2xhc3M6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaXRlbXM7XG4gICAgcHJpdmF0ZSBfaXRlbXNBcmVVc2VkO1xuICAgIHByaXZhdGUgX2RlZmF1bHRMYWJlbDtcbiAgICBwcml2YXRlIF9wcmltaXRpdmU7XG4gICAgcHJpdmF0ZSBfbWFudWFsT3BlbjtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcbiAgICBwcml2YXRlIF9wcmVzc2VkS2V5cztcbiAgICBwcml2YXRlIF9jb21wYXJlV2l0aDtcbiAgICBwcml2YXRlIF9jbGVhclNlYXJjaE9uQWRkO1xuICAgIHByaXZhdGUgX2lzQ29tcG9zaW5nO1xuICAgIHByaXZhdGUgZ2V0IF9lZGl0YWJsZVNlYXJjaFRlcm0oKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kZXN0cm95JDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9rZXlQcmVzcyQ7XG4gICAgcHJpdmF0ZSBfb25DaGFuZ2U7XG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkO1xuICAgIGNsZWFySXRlbTogKGl0ZW06IGFueSkgPT4gdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihjbGFzc2VzOiBzdHJpbmcsIGF1dG9Gb2N1czogYW55LCBjb25maWc6IE5nU2VsZWN0Q29uZmlnLCBuZXdTZWxlY3Rpb25Nb2RlbDogU2VsZWN0aW9uTW9kZWxGYWN0b3J5LCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIF9jb25zb2xlOiBDb25zb2xlU2VydmljZSk7XG4gICAgZ2V0IHNlbGVjdGVkSXRlbXMoKTogTmdPcHRpb25bXTtcbiAgICBnZXQgc2VsZWN0ZWRWYWx1ZXMoKTogKHN0cmluZyB8IE9iamVjdClbXTtcbiAgICBnZXQgaGFzVmFsdWUoKTogYm9vbGVhbjtcbiAgICBnZXQgY3VycmVudFBhbmVsUG9zaXRpb24oKTogRHJvcGRvd25Qb3NpdGlvbjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5RG93bigkZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZUtleUNvZGUoJGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVNb3VzZWRvd24oJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBoYW5kbGVBcnJvd0NsaWNrKCk6IHZvaWQ7XG4gICAgaGFuZGxlQ2xlYXJDbGljaygpOiB2b2lkO1xuICAgIGNsZWFyTW9kZWwoKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkgfCBhbnlbXSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKHN0YXRlOiBib29sZWFuKTogdm9pZDtcbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICB0b2dnbGVJdGVtKGl0ZW06IE5nT3B0aW9uKTogdm9pZDtcbiAgICBzZWxlY3QoaXRlbTogTmdPcHRpb24pOiB2b2lkO1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgYmx1cigpOiB2b2lkO1xuICAgIHVuc2VsZWN0KGl0ZW06IE5nT3B0aW9uKTogdm9pZDtcbiAgICBzZWxlY3RUYWcoKTogdm9pZDtcbiAgICBzaG93Q2xlYXIoKTogYm9vbGVhbjtcbiAgICB0cmFja0J5T3B0aW9uOiAoXzogbnVtYmVyLCBpdGVtOiBOZ09wdGlvbikgPT4gYW55O1xuICAgIGdldCBzaG93QWRkVGFnKCk6IGJvb2xlYW47XG4gICAgc2hvd05vSXRlbXNGb3VuZCgpOiBib29sZWFuO1xuICAgIHNob3dUeXBlVG9TZWFyY2goKTogYm9vbGVhbjtcbiAgICBvbkNvbXBvc2l0aW9uU3RhcnQoKTogdm9pZDtcbiAgICBvbkNvbXBvc2l0aW9uRW5kKHRlcm06IHN0cmluZyk6IHZvaWQ7XG4gICAgZmlsdGVyKHRlcm06IHN0cmluZyk6IHZvaWQ7XG4gICAgb25JbnB1dEZvY3VzKCRldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Qmx1cigkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25JdGVtSG92ZXIoaXRlbTogTmdPcHRpb24pOiB2b2lkO1xuICAgIGRldGVjdENoYW5nZXMoKTogdm9pZDtcbiAgICBwcml2YXRlIF9zZXRTZWFyY2hUZXJtRnJvbUl0ZW1zO1xuICAgIHByaXZhdGUgX3NldEl0ZW1zO1xuICAgIHByaXZhdGUgX3NldEl0ZW1zRnJvbU5nT3B0aW9ucztcbiAgICBwcml2YXRlIF9pc1ZhbGlkV3JpdGVWYWx1ZTtcbiAgICBwcml2YXRlIF9oYW5kbGVXcml0ZVZhbHVlO1xuICAgIHByaXZhdGUgX2hhbmRsZUtleVByZXNzZXM7XG4gICAgcHJpdmF0ZSBfc2V0SW5wdXRBdHRyaWJ1dGVzO1xuICAgIHByaXZhdGUgX3VwZGF0ZU5nTW9kZWw7XG4gICAgcHJpdmF0ZSBfY2xlYXJTZWFyY2g7XG4gICAgcHJpdmF0ZSBfY2hhbmdlU2VhcmNoO1xuICAgIHByaXZhdGUgX3Njcm9sbFRvTWFya2VkO1xuICAgIHByaXZhdGUgX3Njcm9sbFRvVGFnO1xuICAgIHByaXZhdGUgX29uU2VsZWN0aW9uQ2hhbmdlZDtcbiAgICBwcml2YXRlIF9oYW5kbGVUYWI7XG4gICAgcHJpdmF0ZSBfaGFuZGxlRW50ZXI7XG4gICAgcHJpdmF0ZSBfaGFuZGxlU3BhY2U7XG4gICAgcHJpdmF0ZSBfaGFuZGxlQXJyb3dEb3duO1xuICAgIHByaXZhdGUgX2hhbmRsZUFycm93VXA7XG4gICAgcHJpdmF0ZSBfbmV4dEl0ZW1Jc1RhZztcbiAgICBwcml2YXRlIF9oYW5kbGVCYWNrc3BhY2U7XG4gICAgcHJpdmF0ZSBnZXQgX2lzVHlwZWFoZWFkKCk7XG4gICAgcHJpdmF0ZSBnZXQgX3ZhbGlkVGVybSgpO1xuICAgIHByaXZhdGUgX21lcmdlR2xvYmFsQ29uZmlnO1xufVxuIl19