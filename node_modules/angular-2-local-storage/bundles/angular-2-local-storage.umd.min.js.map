{"version":3,"sources":["ng://angular-2-local-storage/local-storage.config.interface.ts","ng://angular-2-local-storage/local-storage.module.ts","ng://angular-2-local-storage/local-storage.service.ts"],"names":["LOCAL_STORAGE_SERVICE_CONFIG","InjectionToken","LocalStorageModule","forRoot","userConfig","ngModule","providers","provide","useValue","NgModule","LOCAL_STORAGE_NOT_SUPPORTED","LocalStorageService","config","_this","this","isSupported","notifyOptions","setItem","removeItem","prefix","storageType","errors","Subscriber","removeItems","setItems","warnings","setNotify","setPrefix","setStorageType","errors$","Observable","observer","pipe","share","removeItems$","setItems$","warnings$","checkSupport","prototype","add","key","value","console","warn","set","clearAll","regularExpression","prefixRegex","RegExp","testRegex","next","prefixLength","length","webStorage","test","substr","remove","e","message","deriveKey","get","item","getItem","JSON","parse","getStorageType","keys","push","count","storage","i","indexOf","_i","arguments","result","forEach","undefined","stringify","newvalue","supported","window","Math","round","random","endsWith","Injectable","args","providedIn","Optional","type","Inject"],"mappings":"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","sourcesContent":["import { INotifyOptions } from './notify-options.interface';\nimport { InjectionToken } from '@angular/core';\n\nexport const LOCAL_STORAGE_SERVICE_CONFIG = new InjectionToken<string>('LOCAL_STORAGE_SERVICE_CONFIG');\n\nexport interface ILocalStorageServiceConfig {\n    // Properties:\n    notifyOptions?: INotifyOptions;\n    prefix?: string;\n    storageType?: 'sessionStorage' | 'localStorage';\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ILocalStorageServiceConfig, LOCAL_STORAGE_SERVICE_CONFIG } from './local-storage.config.interface';\n\n@NgModule()\nexport class LocalStorageModule {\n    static forRoot (userConfig: ILocalStorageServiceConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: LocalStorageModule,\n            providers: [\n                { provide: LOCAL_STORAGE_SERVICE_CONFIG, useValue: userConfig }\n            ]\n        }\n    }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, Subscriber } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { ILocalStorageEvent } from './local-storage-events.interface';\nimport { INotifyOptions } from './notify-options.interface';\nimport { ILocalStorageServiceConfig, LOCAL_STORAGE_SERVICE_CONFIG } from './local-storage.config.interface';\n\nconst DEPRECATED: string = 'This function is deprecated.';\nconst LOCAL_STORAGE_NOT_SUPPORTED: string = 'LOCAL_STORAGE_NOT_SUPPORTED';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocalStorageService {\n    public isSupported: boolean = false;\n\n    public errors$: Observable<string>;\n    public removeItems$: Observable<ILocalStorageEvent>;\n    public setItems$: Observable<ILocalStorageEvent>;\n    public warnings$: Observable<string>;\n\n    private notifyOptions: INotifyOptions = {\n        setItem: false,\n        removeItem: false\n    };\n    private prefix: string = 'ls';\n    private storageType: 'sessionStorage' | 'localStorage' = 'localStorage';\n    private webStorage: Storage;\n\n    private errors: Subscriber<string> = new Subscriber<string>();\n    private removeItems: Subscriber<ILocalStorageEvent> = new Subscriber<ILocalStorageEvent>() ;\n    private setItems: Subscriber<ILocalStorageEvent> = new Subscriber<ILocalStorageEvent>();\n    private warnings: Subscriber<string> = new Subscriber<string>();\n\n    constructor (\n        @Optional() @Inject(LOCAL_STORAGE_SERVICE_CONFIG) config: ILocalStorageServiceConfig = {}\n    ) {\n        let { notifyOptions, prefix, storageType } = config;\n\n        if (notifyOptions != null) {\n            let { setItem, removeItem } = notifyOptions;\n            this.setNotify(!!setItem, !!removeItem);\n        }\n        if (prefix != null) {\n            this.setPrefix(prefix);\n        }\n        if (storageType != null) {\n            this.setStorageType(storageType);\n        }\n\n        this.errors$ = new Observable<string>((observer: Subscriber<string>) => this.errors = observer).pipe(share());\n        this.removeItems$ = new Observable<ILocalStorageEvent>((observer: Subscriber<ILocalStorageEvent>) => this.removeItems = observer).pipe(share());\n        this.setItems$ = new Observable<ILocalStorageEvent>((observer: Subscriber<ILocalStorageEvent>) => this.setItems = observer).pipe(share());\n        this.warnings$ = new Observable<string>((observer: Subscriber<string>) => this.warnings = observer).pipe(share());\n\n        this.isSupported = this.checkSupport();\n    }\n\n    public add (key: string, value: any): boolean {\n        if (console && console.warn) {\n            console.warn(DEPRECATED);\n            console.warn('Use `LocalStorageService.set` instead.');\n        }\n\n        return this.set(key, value);\n    }\n\n    public clearAll (regularExpression?: string): boolean {\n        // Setting both regular expressions independently\n        // Empty strings result in catchall RegExp\n        let prefixRegex = !!this.prefix ? new RegExp('^' + this.prefix) : new RegExp('');\n        let testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp('');\n\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return false;\n        }\n\n        let prefixLength = this.prefix.length;\n\n        for (let key in this.webStorage) {\n            // Only remove items that are for this app and match the regular expression\n            if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {\n                try {\n                    this.remove(key.substr(prefixLength));\n                } catch (e) {\n                    this.errors.next(e.message);\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public deriveKey (key: string): string {\n        return `${this.prefix}${key}`;\n    }\n\n    public get <T> (key: string): T {\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return null;\n        }\n\n        let item = this.webStorage ? this.webStorage.getItem(this.deriveKey(key)) : null;\n        // FIXME: not a perfect solution, since a valid 'null' string can't be stored\n        if (!item || item === 'null') {\n            return null;\n        }\n\n        try {\n            return JSON.parse(item);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    public getStorageType (): string {\n        return this.storageType;\n    }\n\n    public keys (): Array<string> {\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return [];\n        }\n\n        let prefixLength = this.prefix.length;\n        let keys: Array<string> = [];\n        for (let key in this.webStorage) {\n            // Only return keys that are for this app\n            if (key.substr(0, prefixLength) === this.prefix) {\n                try {\n                    keys.push(key.substr(prefixLength));\n                } catch (e) {\n                    this.errors.next(e.message);\n                    return [];\n                }\n            }\n        }\n        return keys;\n    }\n\n    public length (): number {\n        let count = 0;\n        let storage = this.webStorage;\n        for(let i = 0; i < storage.length; i++) {\n            if (storage.key(i).indexOf(this.prefix) === 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n\n    public remove (...keys: Array<string>): boolean {\n        let result = true;\n        keys.forEach((key: string) => {\n            if (!this.isSupported) {\n                this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n                result = false;\n            }\n\n            try {\n                this.webStorage.removeItem(this.deriveKey(key));\n                if (this.notifyOptions.removeItem) {\n                    this.removeItems.next({\n                        key: key,\n                        storageType: this.storageType\n                    });\n                }\n            } catch (e) {\n                this.errors.next(e.message);\n                result = false;\n            }\n        });\n        return result;\n    }\n\n    public set (key: string, value: any): boolean {\n        // Let's convert `undefined` values to `null` to get the value consistent\n        if (value === undefined) {\n            value = null;\n        } else {\n            value = JSON.stringify(value);\n        }\n\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return false;\n        }\n\n        try {\n            if (this.webStorage) {\n                this.webStorage.setItem(this.deriveKey(key), value);\n            }\n            if (this.notifyOptions.setItem) {\n                this.setItems.next({\n                    key: key,\n                    newvalue: value,\n                    storageType: this.storageType\n                });\n            }\n        } catch (e) {\n            this.errors.next(e.message);\n            return false;\n        }\n        return true;\n    }\n\n    private checkSupport (): boolean {\n        try {\n            let supported = this.storageType in window\n                          && window[this.storageType] !== null;\n\n            if (supported) {\n                this.webStorage = window[this.storageType];\n\n                // When Safari (OS X or iOS) is in private browsing mode, it\n                // appears as though localStorage is available, but trying to\n                // call .setItem throws an exception.\n                //\n                // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made\n                // to add something to storage that exceeded the quota.\"\n                let key = this.deriveKey(`__${Math.round(Math.random() * 1e7)}`);\n                this.webStorage.setItem(key, '');\n                this.webStorage.removeItem(key);\n            }\n\n            return supported;\n        } catch (e) {\n            this.errors.next(e.message);\n            return false;\n        }\n    }\n\n    private setPrefix (prefix: string): void {\n        this.prefix = prefix;\n\n        // If there is a prefix set in the config let's use that with an appended\n        // period for readability:\n        const PERIOD: string = '.';\n        if (this.prefix && !this.prefix.endsWith(PERIOD)) {\n            this.prefix = !!this.prefix ? `${this.prefix}${PERIOD}` : '';\n        }\n    }\n\n    private setStorageType (storageType: 'sessionStorage' | 'localStorage'): void {\n        this.storageType = storageType;\n    }\n\n    private setNotify (setItem: boolean, removeItem: boolean): void {\n        if (setItem != null) {\n            this.notifyOptions.setItem = setItem;\n        }\n        if (removeItem != null) {\n            this.notifyOptions.removeItem = removeItem;\n        }\n    }\n}\n"]}