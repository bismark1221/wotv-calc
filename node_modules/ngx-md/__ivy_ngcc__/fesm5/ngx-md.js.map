{"version":3,"file":"ngx-md.js","sources":["ng:/ngx-md/lib/ngx-md.service.ts","ng:/ngx-md/lib/ngx-md.component.ts","ng:/ngx-md/lib/ngx-md.config.ts","ng:/ngx-md/lib/ngx-md.module.ts"],"names":["Prism.highlightAll"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(private _http: HttpClient, private _domSanitizer: DomSanitizer) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, { responseType: 'text' }).pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign(\n      {\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n      },\n      options\n    );\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: HttpErrorResponse): any {\n    const errMsg = error.message ? error.message : error.toString();\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n          .replace(\n            /^\\s*\\[ \\]\\s*/,\n            '<input type=\"checkbox\" class=\"md-checkbox\" disabled> '\n          )\n          .replace(\n            /^\\s*\\[x\\]\\s*/,\n            '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> '\n          );\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  PLATFORM_ID,\n  Inject,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n  selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n      .token.operator,\n      .token.entity,\n      .token.url,\n      .language-css .token.string,\n      .style .token.string {\n        background: none;\n      }\n      .md-checkbox {\n        vertical-align: middle;\n        margin: 0 0.2em 0.25em -1.6em;\n        font-size: 16px;\n      }\n    `,\n  ],\n})\nexport class NgxMdComponent implements AfterViewInit {\n  _path: string;\n  _data: string;\n  _md: any;\n  _ext: string;\n  changeLog: string[] = [];\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  @Output() loaded: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    public _mdService: NgxMdService,\n    public _el: ElementRef,\n    @Inject(PLATFORM_ID) public platformId: string\n  ) {}\n\n  @Input()\n  set path(value: string) {\n    if (value) {\n      this._path = value;\n      this.onPathChange();\n    }\n  }\n\n  @Input()\n  set data(value: string) {\n    if (value) {\n      this._data = value;\n      this.onDataChange(value);\n    }\n  }\n\n  /**\n   * Boolean indicating if the markdown content should be sanitized to avoid script injections\n   */\n  @Input() public sanitizeHtml = true;\n\n  // on input\n  onDataChange(data: string) {\n    if (data) {\n      this._el.nativeElement.innerHTML = this._mdService.compile(\n        data,\n        this.sanitizeHtml\n      );\n    } else {\n      this._el.nativeElement.innerHTML = '';\n    }\n    this.highlightContent(false);\n  }\n\n  /**\n   *  After view init\n   */\n  ngAfterViewInit() {\n    if (this._path) {\n      this.onPathChange();\n    } else if (!this._data) {\n      this.processRaw();\n    }\n  }\n\n  processRaw() {\n    this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n    this._el.nativeElement.innerHTML = this._mdService.compile(\n      this._md,\n      this.sanitizeHtml\n    );\n    this.highlightContent(false);\n  }\n\n  /**\n   * get remote conent;\n   */\n  onPathChange() {\n    this._ext =\n      this._path &&\n      this._path\n        .split('.')\n        .splice(-1)\n        .join();\n    this._mdService\n      .getContent(this._path)\n      .pipe(catchError(this.handleError))\n      .subscribe(data => {\n        this.loaded.emit(data);\n        this._md =\n          this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n        this._el.nativeElement.innerHTML = this._mdService.compile(\n          this.prepare(this._md),\n          this.sanitizeHtml\n        );\n        this.highlightContent(false);\n      });\n  }\n\n  /**\n   * catch http error\n   */\n  private handleError(error: any): Subscribable<any> {\n    this.error.emit(error);\n    console.error('An error occurred', error); // for demo purposes only\n    return error.message || error;\n  }\n\n  /**\n   * Prepare string\n   */\n  prepare(raw: string) {\n    if (!raw) {\n      return '';\n    }\n    if (this._ext === 'md' || !this.path) {\n      let isCodeBlock = false;\n      return raw\n        .split('\\n')\n        .map((line: string) => {\n          // If the first non-blank chars are an opening/closing code block, toggle the flag\n          if (this.trimLeft(line).substring(0, 3) === '```') {\n            isCodeBlock = !isCodeBlock;\n          }\n          return isCodeBlock ? line : line.trim();\n        })\n        .join('\\n');\n    }\n    return raw.replace(/\\\"/g, '\\'');\n  }\n\n  /**\n   * Trim left whitespace\n   */\n  private trimLeft(line: string) {\n    return line.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /**\n   * Use Prism to highlight code snippets only on the browser\n   */\n  private highlightContent(async: boolean): void {\n    if (isPlatformBrowser(this.platformId)) {\n      Prism.highlightAll(async);\n    }\n  }\n}\n\nfunction decodeHtml(html: string) {\n  // https://stackoverflow.com/a/7394787/588521\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig],\n    };\n  }\n}\n"]}