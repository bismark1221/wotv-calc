/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-md.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, SecurityContext } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { Renderer, setOptions, parse } from 'marked';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/platform-browser";
var NgxMdService = /** @class */ (function () {
    function NgxMdService(_http, _domSanitizer) {
        this._http = _http;
        this._domSanitizer = _domSanitizer;
        this._renderer = new Renderer();
        this.extendRenderer();
        this.setMarkedOptions({});
    }
    // get the content from remote resource
    // get the content from remote resource
    /**
     * @param {?} path
     * @return {?}
     */
    NgxMdService.prototype.getContent = 
    // get the content from remote resource
    /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        return this._http.get(path, { responseType: 'text' }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.extractData(res); })), catchError(this.handleError));
    };
    Object.defineProperty(NgxMdService.prototype, "renderer", {
        get: /**
         * @return {?}
         */
        function () {
            return this._renderer;
        },
        enumerable: true,
        configurable: true
    });
    // handle data
    // handle data
    /**
     * @param {?} res
     * @return {?}
     */
    NgxMdService.prototype.extractData = 
    // handle data
    /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        return res || '';
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NgxMdService.prototype.setMarkedOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options = Object.assign({
            gfm: true,
            tables: true,
            breaks: false,
            pedantic: false,
            sanitize: false,
            smartLists: true,
            smartypants: false,
        }, options);
        options.renderer = this._renderer;
        setOptions(options);
    };
    // comple markdown to html
    // comple markdown to html
    /**
     * @param {?} data
     * @param {?=} sanitize
     * @return {?}
     */
    NgxMdService.prototype.compile = 
    // comple markdown to html
    /**
     * @param {?} data
     * @param {?=} sanitize
     * @return {?}
     */
    function (data, sanitize) {
        if (sanitize === void 0) { sanitize = true; }
        return this._domSanitizer.sanitize(sanitize ? SecurityContext.HTML : SecurityContext.NONE, parse(data).trim());
    };
    // handle error
    // handle error
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    NgxMdService.prototype.handleError = 
    // handle error
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var errMsg = error.message ? error.message : error.toString();
        return throwError(errMsg);
    };
    // extend marked render to support todo checkbox
    // extend marked render to support todo checkbox
    /**
     * @private
     * @return {?}
     */
    NgxMdService.prototype.extendRenderer = 
    // extend marked render to support todo checkbox
    /**
     * @private
     * @return {?}
     */
    function () {
        this._renderer.listitem = (/**
         * @param {?} text
         * @return {?}
         */
        function (text) {
            if (/^\s*\[[x ]\]\s*/.test(text)) {
                text = text
                    .replace(/^\s*\[ \]\s*/, '<input type="checkbox" class="md-checkbox" disabled> ')
                    .replace(/^\s*\[x\]\s*/, '<input type="checkbox" class="md-checkbox" checked disabled> ');
                return '<li style="list-style: none">' + text + '</li>';
            }
            else {
                return '<li>' + text + '</li>';
            }
        });
    };
    NgxMdService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    NgxMdService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: DomSanitizer }
    ]; };
    /** @nocollapse */ NgxMdService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxMdService_Factory() { return new NgxMdService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer)); }, token: NgxMdService, providedIn: "root" });
    return NgxMdService;
}());
export { NgxMdService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMdService.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    NgxMdService.prototype._http;
    /**
     * @type {?}
     * @private
     */
    NgxMdService.prototype._domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1kLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbWQvIiwic291cmNlcyI6WyJsaWIvbmd4LW1kLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsVUFBVSxFQUFxQixNQUFNLHNCQUFzQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxVQUFVLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7O0FBRXpEO0lBS0Usc0JBQW9CLEtBQWlCLEVBQVUsYUFBMkI7UUFBdEQsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFjO1FBRGxFLGNBQVMsR0FBUSxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBRXRDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELHVDQUF1Qzs7Ozs7O0lBQ3ZDLGlDQUFVOzs7Ozs7SUFBVixVQUFXLElBQVk7UUFBdkIsaUJBS0M7UUFKQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDeEQsR0FBRzs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsRUFBQyxFQUNqQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVELHNCQUFXLGtDQUFROzs7O1FBQW5CO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBRUQsY0FBYzs7Ozs7O0lBQ1Asa0NBQVc7Ozs7OztJQUFsQixVQUFtQixHQUFRO1FBQ3pCLE9BQU8sR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVNLHVDQUFnQjs7OztJQUF2QixVQUF3QixPQUFZO1FBQ2xDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUNyQjtZQUNFLEdBQUcsRUFBRSxJQUFJO1lBQ1QsTUFBTSxFQUFFLElBQUk7WUFDWixNQUFNLEVBQUUsS0FBSztZQUNiLFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFFLEtBQUs7WUFDZixVQUFVLEVBQUUsSUFBSTtZQUNoQixXQUFXLEVBQUUsS0FBSztTQUNuQixFQUNELE9BQU8sQ0FDUixDQUFDO1FBQ0YsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2xDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsMEJBQTBCOzs7Ozs7O0lBQ25CLDhCQUFPOzs7Ozs7O0lBQWQsVUFBZSxJQUFZLEVBQUUsUUFBZTtRQUFmLHlCQUFBLEVBQUEsZUFBZTtRQUMxQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUNoQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQ3RELEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDbkIsQ0FBQztJQUNKLENBQUM7SUFFRCxlQUFlOzs7Ozs7O0lBQ1Asa0NBQVc7Ozs7Ozs7SUFBbkIsVUFBb0IsS0FBd0I7O1lBQ3BDLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFO1FBQy9ELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxnREFBZ0Q7Ozs7OztJQUN4QyxxQ0FBYzs7Ozs7O0lBQXRCO1FBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFROzs7O1FBQUcsVUFBUyxJQUFZO1lBQzdDLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLEdBQUcsSUFBSTtxQkFDUixPQUFPLENBQ04sY0FBYyxFQUNkLHVEQUF1RCxDQUN4RDtxQkFDQSxPQUFPLENBQ04sY0FBYyxFQUNkLCtEQUErRCxDQUNoRSxDQUFDO2dCQUNKLE9BQU8sK0JBQStCLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQzthQUN6RDtpQkFBTTtnQkFDTCxPQUFPLE1BQU0sR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDO2FBQ2hDO1FBQ0gsQ0FBQyxDQUFBLENBQUM7SUFDSixDQUFDOztnQkE1RUYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFSUSxVQUFVO2dCQUlWLFlBQVk7Ozt1QkFMckI7Q0FvRkMsQUE3RUQsSUE2RUM7U0ExRVksWUFBWTs7Ozs7O0lBQ3ZCLGlDQUF3Qzs7Ozs7SUFDNUIsNkJBQXlCOzs7OztJQUFFLHFDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFNlY3VyaXR5Q29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZW5kZXJlciwgc2V0T3B0aW9ucywgcGFyc2UgfSBmcm9tICdtYXJrZWQnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNZFNlcnZpY2Uge1xuICBwcml2YXRlIF9yZW5kZXJlcjogYW55ID0gbmV3IFJlbmRlcmVyKCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2h0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgX2RvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7XG4gICAgdGhpcy5leHRlbmRSZW5kZXJlcigpO1xuICAgIHRoaXMuc2V0TWFya2VkT3B0aW9ucyh7fSk7XG4gIH1cblxuICAvLyBnZXQgdGhlIGNvbnRlbnQgZnJvbSByZW1vdGUgcmVzb3VyY2VcbiAgZ2V0Q29udGVudChwYXRoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldChwYXRoLCB7IHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pLnBpcGUoXG4gICAgICBtYXAocmVzID0+IHRoaXMuZXh0cmFjdERhdGEocmVzKSksXG4gICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcmVuZGVyZXIoKTogUmVuZGVyZXIge1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXJlcjtcbiAgfVxuXG4gIC8vIGhhbmRsZSBkYXRhXG4gIHB1YmxpYyBleHRyYWN0RGF0YShyZXM6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHJlcyB8fCAnJztcbiAgfVxuXG4gIHB1YmxpYyBzZXRNYXJrZWRPcHRpb25zKG9wdGlvbnM6IGFueSkge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBnZm06IHRydWUsXG4gICAgICAgIHRhYmxlczogdHJ1ZSxcbiAgICAgICAgYnJlYWtzOiBmYWxzZSxcbiAgICAgICAgcGVkYW50aWM6IGZhbHNlLFxuICAgICAgICBzYW5pdGl6ZTogZmFsc2UsXG4gICAgICAgIHNtYXJ0TGlzdHM6IHRydWUsXG4gICAgICAgIHNtYXJ0eXBhbnRzOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgICBvcHRpb25zLnJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIC8vIGNvbXBsZSBtYXJrZG93biB0byBodG1sXG4gIHB1YmxpYyBjb21waWxlKGRhdGE6IHN0cmluZywgc2FuaXRpemUgPSB0cnVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbVNhbml0aXplci5zYW5pdGl6ZShcbiAgICAgIHNhbml0aXplID8gU2VjdXJpdHlDb250ZXh0LkhUTUwgOiBTZWN1cml0eUNvbnRleHQuTk9ORSxcbiAgICAgIHBhcnNlKGRhdGEpLnRyaW0oKVxuICAgICk7XG4gIH1cblxuICAvLyBoYW5kbGUgZXJyb3JcbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBhbnkge1xuICAgIGNvbnN0IGVyck1zZyA9IGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJNc2cpO1xuICB9XG5cbiAgLy8gZXh0ZW5kIG1hcmtlZCByZW5kZXIgdG8gc3VwcG9ydCB0b2RvIGNoZWNrYm94XG4gIHByaXZhdGUgZXh0ZW5kUmVuZGVyZXIoKSB7XG4gICAgdGhpcy5fcmVuZGVyZXIubGlzdGl0ZW0gPSBmdW5jdGlvbih0ZXh0OiBzdHJpbmcpIHtcbiAgICAgIGlmICgvXlxccypcXFtbeCBdXFxdXFxzKi8udGVzdCh0ZXh0KSkge1xuICAgICAgICB0ZXh0ID0gdGV4dFxuICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgL15cXHMqXFxbIFxcXVxccyovLFxuICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cIm1kLWNoZWNrYm94XCIgZGlzYWJsZWQ+ICdcbiAgICAgICAgICApXG4gICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAvXlxccypcXFt4XFxdXFxzKi8sXG4gICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwibWQtY2hlY2tib3hcIiBjaGVja2VkIGRpc2FibGVkPiAnXG4gICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuICc8bGkgc3R5bGU9XCJsaXN0LXN0eWxlOiBub25lXCI+JyArIHRleHQgKyAnPC9saT4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICc8bGk+JyArIHRleHQgKyAnPC9saT4nO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiJdfQ==