{"version":3,"file":"ngx-md.js","sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(private _http: HttpClient, private _domSanitizer: DomSanitizer) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, { responseType: 'text' }).pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign(\n      {\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n      },\n      options\n    );\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: HttpErrorResponse): any {\n    const errMsg = error.message ? error.message : error.toString();\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n          .replace(\n            /^\\s*\\[ \\]\\s*/,\n            '<input type=\"checkbox\" class=\"md-checkbox\" disabled> '\n          )\n          .replace(\n            /^\\s*\\[x\\]\\s*/,\n            '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> '\n          );\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  PLATFORM_ID,\n  Inject,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n  selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n      .token.operator,\n      .token.entity,\n      .token.url,\n      .language-css .token.string,\n      .style .token.string {\n        background: none;\n      }\n      .md-checkbox {\n        vertical-align: middle;\n        margin: 0 0.2em 0.25em -1.6em;\n        font-size: 16px;\n      }\n    `,\n  ],\n})\nexport class NgxMdComponent implements AfterViewInit {\n  _path: string;\n  _data: string;\n  _md: any;\n  _ext: string;\n  changeLog: string[] = [];\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  @Output() loaded: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    public _mdService: NgxMdService,\n    public _el: ElementRef,\n    @Inject(PLATFORM_ID) public platformId: string\n  ) {}\n\n  @Input()\n  set path(value: string) {\n    if (value) {\n      this._path = value;\n      this.onPathChange();\n    }\n  }\n\n  @Input()\n  set data(value: string) {\n    if (value) {\n      this._data = value;\n      this.onDataChange(value);\n    }\n  }\n\n  /**\n   * Boolean indicating if the markdown content should be sanitized to avoid script injections\n   */\n  @Input() public sanitizeHtml = true;\n\n  // on input\n  onDataChange(data: string) {\n    if (data) {\n      this._el.nativeElement.innerHTML = this._mdService.compile(\n        data,\n        this.sanitizeHtml\n      );\n    } else {\n      this._el.nativeElement.innerHTML = '';\n    }\n    this.highlightContent(false);\n  }\n\n  /**\n   *  After view init\n   */\n  ngAfterViewInit() {\n    if (this._path) {\n      this.onPathChange();\n    } else if (!this._data) {\n      this.processRaw();\n    }\n  }\n\n  processRaw() {\n    this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n    this._el.nativeElement.innerHTML = this._mdService.compile(\n      this._md,\n      this.sanitizeHtml\n    );\n    this.highlightContent(false);\n  }\n\n  /**\n   * get remote conent;\n   */\n  onPathChange() {\n    this._ext =\n      this._path &&\n      this._path\n        .split('.')\n        .splice(-1)\n        .join();\n    this._mdService\n      .getContent(this._path)\n      .pipe(catchError(this.handleError))\n      .subscribe(data => {\n        this.loaded.emit(data);\n        this._md =\n          this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n        this._el.nativeElement.innerHTML = this._mdService.compile(\n          this.prepare(this._md),\n          this.sanitizeHtml\n        );\n        this.highlightContent(false);\n      });\n  }\n\n  /**\n   * catch http error\n   */\n  private handleError(error: any): Subscribable<any> {\n    this.error.emit(error);\n    console.error('An error occurred', error); // for demo purposes only\n    return error.message || error;\n  }\n\n  /**\n   * Prepare string\n   */\n  prepare(raw: string) {\n    if (!raw) {\n      return '';\n    }\n    if (this._ext === 'md' || !this.path) {\n      let isCodeBlock = false;\n      return raw\n        .split('\\n')\n        .map((line: string) => {\n          // If the first non-blank chars are an opening/closing code block, toggle the flag\n          if (this.trimLeft(line).substring(0, 3) === '```') {\n            isCodeBlock = !isCodeBlock;\n          }\n          return isCodeBlock ? line : line.trim();\n        })\n        .join('\\n');\n    }\n    return raw.replace(/\\\"/g, '\\'');\n  }\n\n  /**\n   * Trim left whitespace\n   */\n  private trimLeft(line: string) {\n    return line.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /**\n   * Use Prism to highlight code snippets only on the browser\n   */\n  private highlightContent(async: boolean): void {\n    if (isPlatformBrowser(this.platformId)) {\n      Prism.highlightAll(async);\n    }\n  }\n}\n\nfunction decodeHtml(html: string) {\n  // https://stackoverflow.com/a/7394787/588521\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig],\n    };\n  }\n}\n"],"names":["Prism.highlightAll"],"mappings":"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"}