{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","_domSanitizer","this","_renderer","Renderer","extendRenderer","setMarkedOptions","prototype","getContent","path","_this","get","responseType","pipe","map","res","extractData","catchError","handleError","Object","defineProperty","options","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","renderer","setOptions","compile","data","SecurityContext","HTML","NONE","parse","trim","error","errMsg","message","toString","throwError","listitem","text","test","replace","Injectable","args","providedIn","HttpClient","DomSanitizer","NgxMdComponent","_mdService","_el","platformId","changeLog","EventEmitter","loaded","sanitizeHtml","value","_path","onPathChange","_data","onDataChange","nativeElement","innerHTML","highlightContent","ngAfterViewInit","processRaw","html","txt","_md","prepare","document","createElement","_ext","split","splice","join","subscribe","emit","console","raw","isCodeBlock_1","line","trimLeft","substring","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","ElementRef","Inject","PLATFORM_ID","Output","Input","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(private _http: HttpClient, private _domSanitizer: DomSanitizer) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, { responseType: 'text' }).pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign(\n      {\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n      },\n      options\n    );\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: HttpErrorResponse): any {\n    const errMsg = error.message ? error.message : error.toString();\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n          .replace(\n            /^\\s*\\[ \\]\\s*/,\n            '<input type=\"checkbox\" class=\"md-checkbox\" disabled> '\n          )\n          .replace(\n            /^\\s*\\[x\\]\\s*/,\n            '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> '\n          );\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  AfterViewInit,\n  Input,\n  PLATFORM_ID,\n  Inject,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n  selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n      .token.operator,\n      .token.entity,\n      .token.url,\n      .language-css .token.string,\n      .style .token.string {\n        background: none;\n      }\n      .md-checkbox {\n        vertical-align: middle;\n        margin: 0 0.2em 0.25em -1.6em;\n        font-size: 16px;\n      }\n    `,\n  ],\n})\nexport class NgxMdComponent implements AfterViewInit {\n  _path: string;\n  _data: string;\n  _md: any;\n  _ext: string;\n  changeLog: string[] = [];\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\n  @Output() loaded: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    public _mdService: NgxMdService,\n    public _el: ElementRef,\n    @Inject(PLATFORM_ID) public platformId: string\n  ) {}\n\n  @Input()\n  set path(value: string) {\n    if (value) {\n      this._path = value;\n      this.onPathChange();\n    }\n  }\n\n  @Input()\n  set data(value: string) {\n    if (value) {\n      this._data = value;\n      this.onDataChange(value);\n    }\n  }\n\n  /**\n   * Boolean indicating if the markdown content should be sanitized to avoid script injections\n   */\n  @Input() public sanitizeHtml = true;\n\n  // on input\n  onDataChange(data: string) {\n    if (data) {\n      this._el.nativeElement.innerHTML = this._mdService.compile(\n        data,\n        this.sanitizeHtml\n      );\n    } else {\n      this._el.nativeElement.innerHTML = '';\n    }\n    this.highlightContent(false);\n  }\n\n  /**\n   *  After view init\n   */\n  ngAfterViewInit() {\n    if (this._path) {\n      this.onPathChange();\n    } else if (!this._data) {\n      this.processRaw();\n    }\n  }\n\n  processRaw() {\n    this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n    this._el.nativeElement.innerHTML = this._mdService.compile(\n      this._md,\n      this.sanitizeHtml\n    );\n    this.highlightContent(false);\n  }\n\n  /**\n   * get remote conent;\n   */\n  onPathChange() {\n    this._ext =\n      this._path &&\n      this._path\n        .split('.')\n        .splice(-1)\n        .join();\n    this._mdService\n      .getContent(this._path)\n      .pipe(catchError(this.handleError))\n      .subscribe(data => {\n        this.loaded.emit(data);\n        this._md =\n          this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n        this._el.nativeElement.innerHTML = this._mdService.compile(\n          this.prepare(this._md),\n          this.sanitizeHtml\n        );\n        this.highlightContent(false);\n      });\n  }\n\n  /**\n   * catch http error\n   */\n  private handleError(error: any): Subscribable<any> {\n    this.error.emit(error);\n    console.error('An error occurred', error); // for demo purposes only\n    return error.message || error;\n  }\n\n  /**\n   * Prepare string\n   */\n  prepare(raw: string) {\n    if (!raw) {\n      return '';\n    }\n    if (this._ext === 'md' || !this.path) {\n      let isCodeBlock = false;\n      return raw\n        .split('\\n')\n        .map((line: string) => {\n          // If the first non-blank chars are an opening/closing code block, toggle the flag\n          if (this.trimLeft(line).substring(0, 3) === '```') {\n            isCodeBlock = !isCodeBlock;\n          }\n          return isCodeBlock ? line : line.trim();\n        })\n        .join('\\n');\n    }\n    return raw.replace(/\\\"/g, '\\'');\n  }\n\n  /**\n   * Trim left whitespace\n   */\n  private trimLeft(line: string) {\n    return line.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /**\n   * Use Prism to highlight code snippets only on the browser\n   */\n  private highlightContent(async: boolean): void {\n    if (isPlatformBrowser(this.platformId)) {\n      Prism.highlightAll(async);\n    }\n  }\n}\n\nfunction decodeHtml(html: string) {\n  // https://stackoverflow.com/a/7394787/588521\n  const txt = document.createElement('textarea');\n  txt.innerHTML = html;\n  return txt.value;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig],\n    };\n  }\n}\n"]}