{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","this","Renderer","extendRenderer","setMarkedOptions","prototype","getContent","path","get","responseType","pipe","map","res","catchError","handleError","Object","defineProperty","_renderer","options","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","renderer","setOptions","compile","data","parse","error","errMsg","fetch","body","json","err","JSON","stringify","status","statusText","message","toString","throwError","listitem","text","test","replace","Injectable","args","providedIn","HttpClient","NgxMdComponent","_mdService","_el","_platformId","value","_path","onPathChange","_data","onDataChange","ngAfterViewInit","_md","nativeElement","innerHTML","highlightContent","prepare","decodeHtml","_this","_ext","split","splice","join","subscribe","console","Promise","reject","processRaw","raw","isCodeBlock_1","line","trimLeft","substring","trim","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","styles","ElementRef","Inject","PLATFORM_ID","Input","html","txt","document","createElement","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core'\nimport { HttpClient } from '@angular/common/http'\nimport { throwError, Observable } from 'rxjs'\nimport { catchError, map } from 'rxjs/operators'\nimport { Renderer, setOptions, parse } from 'marked'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(private _http:HttpClient) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string):Observable<any> {\n    return this._http.get(path, {responseType: 'text'}).pipe(map(res => res))\n      .pipe(catchError(this.handleError));\n  }\n\n  get renderer() {\n     return this._renderer;\n  }\n\n  setMarkedOptions(options: any) {\n    options = Object.assign({\n       gfm: true,\n       tables: true,\n       breaks: false,\n       pedantic: false,\n       sanitize: false,\n       smartLists: true,\n       smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n     \n    setOptions(options);\n  }\n\n   // comple markdown to html\n  compile(data: string) {\n    return parse(data);\n  }\n\n   // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n   // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n      text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> ');\n          return '<li style=\"list-style: none\">' + text + '</li>';\n        } else {\n          return '<li>' + text + '</li>';\n        }\n    };\n  }\n}\n","import { Component, ElementRef, Input, PLATFORM_ID, Inject, AfterViewInit } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'ngx-md, markdown, [Markdown],[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }`\n    ]\n})\nexport class NgxMdComponent implements AfterViewInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n\n    constructor(\n        private _mdService: NgxMdService,\n        private _el: ElementRef,\n        @Inject(PLATFORM_ID) private _platformId: string\n    ) { }\n   \n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n    // on content change\n    ngAfterViewInit() {\n        this._md = this._mdService.compile(this._el.nativeElement.innerHTML)\n        this._el.nativeElement.innerHTML = this._mdService.compile(this._md);\n        this.highlightContent(false);\n    }\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n          this._md = this.prepare(decodeHtml(data));\n          this._md = this._mdService.compile(data)\n        this._el.nativeElement.innerHTML = this._mdService.compile(this._md);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md));\n                this.highlightContent(false);\n            });\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    processRaw(data) {\n        this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n        this._el.nativeElement.innerHTML = this._mdService.compile(this._md);\n        this.highlightContent(false);\n    }\n\n\n    /**\n     * Prepare string\n     */\n    prepare(raw: string) {\n        if (!raw) return '';\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this._platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxMdComponent } from './ngx-md.component';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent]\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"]}