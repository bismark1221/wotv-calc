{"version":3,"file":"ngx-md.umd.js.map","sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> ');\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject, EventEmitter } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    _path: string;\n    _data: string;\n    _md: any;\n    _ext: string;\n    changeLog: string[] = [];\n    errror: EventEmitter<any>  = new EventEmitter<any>();\n    loaded: EventEmitter<any>  = new EventEmitter<any>();\n\n    constructor(\n        public _mdService: NgxMdService,\n        public _el: ElementRef,\n        @Inject(PLATFORM_ID) public platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path).pipe(catchError(this.handleError))\n            .subscribe(data => {\n                this.loaded.emit(data);\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md), this.sanitizeHtml);\n                this.highlightContent(false);\n            });\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Subscribable<any> {\n        this.errror.emit(error);\n        console.error('An error occurred', error); // for demo purposes only\n        return error.message || error;\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"],"names":["Renderer","map","catchError","setOptions","SecurityContext","parse","throwError","Injectable","HttpClient","DomSanitizer","EventEmitter","isPlatformBrowser","Prism.highlightAll","Component","ElementRef","Inject","PLATFORM_ID","Input","NgModule","HttpClientModule"],"mappings":"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"}
