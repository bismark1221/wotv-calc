import { ElementRef, AfterViewInit, EventEmitter } from '@angular/core';
import { NgxMdService } from './ngx-md.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMdComponent implements AfterViewInit {
    _mdService: NgxMdService;
    _el: ElementRef;
    platformId: string;
    _path: string;
    _data: string;
    _md: any;
    _ext: string;
    changeLog: string[];
    error: EventEmitter<any>;
    loaded: EventEmitter<any>;
    constructor(_mdService: NgxMdService, _el: ElementRef, platformId: string);
    path: string;
    data: string;
    /**
     * Boolean indicating if the markdown content should be sanitized to avoid script injections
     */
    sanitizeHtml: boolean;
    onDataChange(data: string): void;
    /**
     *  After view init
     */
    ngAfterViewInit(): void;
    processRaw(): void;
    /**
     * get remote conent;
     */
    onPathChange(): void;
    /**
     * catch http error
     */
    private handleError;
    /**
     * Prepare string
     */
    prepare(raw: string): string;
    /**
     * Trim left whitespace
     */
    private trimLeft;
    /**
     * Use Prism to highlight code snippets only on the browser
     */
    private highlightContent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMdComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMdComponent, "markdown,[Markdown],ngx-md,[NgxMd]", never, { "sanitizeHtml": "sanitizeHtml"; "path": "path"; "data": "data"; }, { "error": "error"; "loaded": "loaded"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1kLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtbWQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4TWRTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtbWQuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hNZENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIF9tZFNlcnZpY2U6IE5neE1kU2VydmljZTtcbiAgICBfZWw6IEVsZW1lbnRSZWY7XG4gICAgcGxhdGZvcm1JZDogc3RyaW5nO1xuICAgIF9wYXRoOiBzdHJpbmc7XG4gICAgX2RhdGE6IHN0cmluZztcbiAgICBfbWQ6IGFueTtcbiAgICBfZXh0OiBzdHJpbmc7XG4gICAgY2hhbmdlTG9nOiBzdHJpbmdbXTtcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbG9hZGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb25zdHJ1Y3RvcihfbWRTZXJ2aWNlOiBOZ3hNZFNlcnZpY2UsIF9lbDogRWxlbWVudFJlZiwgcGxhdGZvcm1JZDogc3RyaW5nKTtcbiAgICBwYXRoOiBzdHJpbmc7XG4gICAgZGF0YTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgbWFya2Rvd24gY29udGVudCBzaG91bGQgYmUgc2FuaXRpemVkIHRvIGF2b2lkIHNjcmlwdCBpbmplY3Rpb25zXG4gICAgICovXG4gICAgc2FuaXRpemVIdG1sOiBib29sZWFuO1xuICAgIG9uRGF0YUNoYW5nZShkYXRhOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqICBBZnRlciB2aWV3IGluaXRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBwcm9jZXNzUmF3KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogZ2V0IHJlbW90ZSBjb25lbnQ7XG4gICAgICovXG4gICAgb25QYXRoQ2hhbmdlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogY2F0Y2ggaHR0cCBlcnJvclxuICAgICAqL1xuICAgIHByaXZhdGUgaGFuZGxlRXJyb3I7XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBzdHJpbmdcbiAgICAgKi9cbiAgICBwcmVwYXJlKHJhdzogc3RyaW5nKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRyaW0gbGVmdCB3aGl0ZXNwYWNlXG4gICAgICovXG4gICAgcHJpdmF0ZSB0cmltTGVmdDtcbiAgICAvKipcbiAgICAgKiBVc2UgUHJpc20gdG8gaGlnaGxpZ2h0IGNvZGUgc25pcHBldHMgb25seSBvbiB0aGUgYnJvd3NlclxuICAgICAqL1xuICAgIHByaXZhdGUgaGlnaGxpZ2h0Q29udGVudDtcbn1cbiJdfQ==