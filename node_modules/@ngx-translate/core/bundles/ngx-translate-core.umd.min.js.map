{
  "version": 3,
  "file": "ngx-translate-core.umd.min.js",
  "sources": [
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.loader.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/missing-translation-handler.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.compiler.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/util.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.parser.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.store.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.service.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.directive.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.pipe.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/public_api.ts"
  ],
  "sourcesContent": [
    "import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n",
    "/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n",
    "import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n",
    "import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n    this.loadingTranslations.pipe(take(1))\n      .subscribe((res: Object) => {\n        this.translations[lang] = this.compiler.compileTranslations(res, lang);\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return this.loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n",
    "import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (this.key) {\n          key = this.key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n              node.lastKey = null;\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n",
    "import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: EventEmitter<TranslationChangeEvent>;\n  onLangChange: EventEmitter<LangChangeEvent>;\n  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || query.length === 0) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n",
    "import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\nimport {TranslateService} from \"./lib/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\nimport {TranslateDirective} from \"./lib/translate.directive\";\nimport {TranslatePipe} from \"./lib/translate.pipe\";\nimport {TranslateStore} from \"./lib/translate.store\";\nimport {USE_STORE} from \"./lib/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./lib/translate.service\";\n\nexport * from \"./lib/translate.loader\";\nexport * from \"./lib/translate.service\";\nexport * from \"./lib/missing-translation-handler\";\nexport * from \"./lib/translate.parser\";\nexport * from \"./lib/translate.compiler\";\nexport * from \"./lib/translate.directive\";\nexport * from \"./lib/translate.pipe\";\nexport * from \"./lib/translate.store\";\n\nexport interface TranslateModuleConfig {\n  loader?: Provider;\n  compiler?: Provider;\n  parser?: Provider;\n  missingTranslationHandler?: Provider;\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n  isolate?: boolean;\n  useDefaultLang?: boolean;\n}\n\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    TranslateDirective\n  ],\n  exports: [\n    TranslatePipe,\n    TranslateDirective\n  ]\n})\nexport class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        TranslateStore,\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "TranslateLoader",
    "TranslateFakeLoader",
    "_super",
    "tslib_1.__extends",
    "MissingTranslationHandler",
    "FakeMissingTranslationHandler",
    "TranslateCompiler",
    "TranslateFakeCompiler",
    "apply",
    "this",
    "arguments",
    "prototype",
    "compile",
    "value",
    "lang",
    "equals",
    "o1",
    "o2",
    "length",
    "key",
    "keySet",
    "t1",
    "Array",
    "isArray",
    "Object",
    "create",
    "isDefined",
    "isObject",
    "item",
    "TranslateParser",
    "_this",
    "TranslateDefaultParser",
    "interpolate",
    "expr",
    "params",
    "interpolateString",
    "getValue",
    "target",
    "keys",
    "split",
    "shift",
    "undefined",
    "fn",
    "TranslateStore",
    "currentLang",
    "defaultLang",
    "translations",
    "langs",
    "onTranslationChange",
    "EventEmitter",
    "onLangChange",
    "onDefaultLangChange",
    "USE_STORE",
    "InjectionToken",
    "TranslateService",
    "store",
    "currentLoader",
    "compiler",
    "parser",
    "missingTranslationHandler",
    "useDefaultLang",
    "isolate",
    "pending",
    "_onTranslationChange",
    "_onLangChange",
    "_onDefaultLangChange",
    "_langs",
    "defineProperty",
    "enumerable",
    "configurable",
    "get",
    "_currentLang",
    "set",
    "_translations",
    "retrieveTranslations",
    "pipe",
    "take",
    "subscribe",
    "res",
    "changeDefaultLang",
    "use",
    "changeLang",
    "of",
    "_translationRequests",
    "getTranslation",
    "loadingTranslations",
    "share",
    "setTranslation",
    "shouldMerge",
    "mergeDeep",
    "source",
    "output",
    "assign",
    "forEach",
    "_a",
    "_b",
    "emit",
    "getLangs",
    "addLangs",
    "indexOf",
    "push",
    "updateLangs",
    "getParsedResult",
    "interpolateParams",
    "e_1",
    "e_2",
    "result",
    "observables",
    "key_1",
    "tslib_1.__values",
    "key_1_1",
    "next",
    "done",
    "k",
    "error",
    "key_2",
    "key_2_1",
    "obs",
    "mergedObs",
    "merge",
    "e_2_1",
    "return",
    "call",
    "toArray",
    "map",
    "arr",
    "obj",
    "index",
    "handle",
    "Observable",
    "observer",
    "onComplete",
    "complete",
    "onError",
    "err",
    "compileTranslations",
    "stream",
    "concat",
    "switchMap",
    "event",
    "instant",
    "Error",
    "obj_1",
    "TranslateDirective",
    "translateService",
    "element",
    "_ref",
    "onTranslationChangeSub",
    "checkNodes",
    "onLangChangeSub",
    "onDefaultLangChangeSub",
    "ngAfterViewChecked",
    "forceUpdate",
    "nodes",
    "setContent",
    "nativeElement",
    "childNodes",
    "i",
    "node",
    "nodeType",
    "trimmedContent",
    "content",
    "trim",
    "currentValue",
    "originalContent",
    "getContent",
    "updateValue",
    "lastKey",
    "lastParams",
    "currentParams",
    "onTranslation",
    "replace",
    "markForCheck",
    "textContent",
    "data",
    "unsubscribe",
    "decorators",
    "TranslatePipe",
    "translate",
    "transform",
    "query",
    "args",
    "_i",
    "validArgs",
    "JSON",
    "parse",
    "e",
    "SyntaxError",
    "_dispose",
    "ngOnDestroy",
    "type",
    "Injectable",
    "Pipe",
    "TranslateModule",
    "forRoot",
    "config",
    "ngModule",
    "providers",
    "loader",
    "provide",
    "useClass",
    "useValue",
    "USE_DEFAULT_LANG",
    "forChild",
    "NgModule",
    "declarations"
  ],
  "mappings": "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"
}
