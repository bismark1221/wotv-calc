{
  "version": 3,
  "file": "ngx-translate-core.js",
  "sources": [
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/public_api.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.pipe.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.directive.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.service.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.store.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.parser.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/util.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.compiler.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/missing-translation-handler.ts",
    "ng://@ngx-translate/core/projects/ngx-translate/core/src/lib/translate.loader.ts"
  ],
  "sourcesContent": [
    "import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\nimport {TranslateService} from \"./lib/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\nimport {TranslateDirective} from \"./lib/translate.directive\";\nimport {TranslatePipe} from \"./lib/translate.pipe\";\nimport {TranslateStore} from \"./lib/translate.store\";\nimport {USE_STORE} from \"./lib/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./lib/translate.service\";\n\nexport * from \"./lib/translate.loader\";\nexport * from \"./lib/translate.service\";\nexport * from \"./lib/missing-translation-handler\";\nexport * from \"./lib/translate.parser\";\nexport * from \"./lib/translate.compiler\";\nexport * from \"./lib/translate.directive\";\nexport * from \"./lib/translate.pipe\";\nexport * from \"./lib/translate.store\";\n\nexport interface TranslateModuleConfig {\n  loader?: Provider;\n  compiler?: Provider;\n  parser?: Provider;\n  missingTranslationHandler?: Provider;\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n  isolate?: boolean;\n  useDefaultLang?: boolean;\n}\n\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    TranslateDirective\n  ],\n  exports: [\n    TranslatePipe,\n    TranslateDirective\n  ]\n})\nexport class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        TranslateStore,\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n}\n",
    "import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: EventEmitter<TranslationChangeEvent>;\n  onLangChange: EventEmitter<LangChangeEvent>;\n  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || query.length === 0) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n",
    "import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (this.key) {\n          key = this.key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n              node.lastKey = null;\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n",
    "import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n    this.loadingTranslations.pipe(take(1))\n      .subscribe((res: Object) => {\n        this.translations[lang] = this.compiler.compileTranslations(res, lang);\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return this.loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n",
    "import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n",
    "/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n",
    "import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
