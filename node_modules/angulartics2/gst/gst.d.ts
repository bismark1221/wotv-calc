import { Angulartics2, GoogleGlobalSiteTagSettings } from 'angulartics2';
import { EventGst, UserTimingsGst } from './gst-interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class GoogleGlobalSiteTagDefaults implements GoogleGlobalSiteTagSettings {
    trackingIds: string[];
    constructor();
}
export declare class Angulartics2GoogleGlobalSiteTag {
    protected angulartics2: Angulartics2;
    private dimensionsAndMetrics;
    constructor(angulartics2: Angulartics2);
    startTracking(): void;
    /**
     * Manually track page view, see:
     *
     * https://developers.google.com/analytics/devguides/collection/gtagjs/single-page-applications#tracking_virtual_pageviews
     *
     * @param path relative url
     */
    pageTrack(path: string): void;
    /**
     * Send interactions to gtag, i.e. for event tracking in Google Analytics. See:
     *
     * https://developers.google.com/analytics/devguides/collection/gtagjs/events
     *
     * @param action associated with the event
     */
    eventTrack(action: string, properties?: Partial<EventGst>): void;
    /**
     * Exception Track Event in GST. See:
     *
     * https://developers.google.com/analytics/devguides/collection/gtagjs/exceptions
     *
     */
    exceptionTrack(properties: any): void;
    /**
     * User Timings Event in GST.
     *
     * @param properties Comprised of the mandatory fields:
     *  - name (string)
     *  - value (number - integer)
     * Properties can also have the optional fields:
     *  - category (string)
     *  - label (string)
     *
     * @link https://developers.google.com/analytics/devguides/collection/gtagjs/user-timings
     */
    userTimings(properties: UserTimingsGst): void;
    private convertTimings;
    setUsername(userId: string | {
        userId: string | number;
    }): void;
    setUserProperties(properties: any): void;
    private setDimensionsAndMetrics;
    private eventTrackInternal;
    private cleanProperties;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Angulartics2GoogleGlobalSiteTag, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3N0LmQudHMiLCJzb3VyY2VzIjpbImdzdC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuZ3VsYXJ0aWNzMiwgR29vZ2xlR2xvYmFsU2l0ZVRhZ1NldHRpbmdzIH0gZnJvbSAnYW5ndWxhcnRpY3MyJztcbmltcG9ydCB7IEV2ZW50R3N0LCBVc2VyVGltaW5nc0dzdCB9IGZyb20gJy4vZ3N0LWludGVyZmFjZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR29vZ2xlR2xvYmFsU2l0ZVRhZ0RlZmF1bHRzIGltcGxlbWVudHMgR29vZ2xlR2xvYmFsU2l0ZVRhZ1NldHRpbmdzIHtcbiAgICB0cmFja2luZ0lkczogc3RyaW5nW107XG4gICAgY29uc3RydWN0b3IoKTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJ0aWNzMkdvb2dsZUdsb2JhbFNpdGVUYWcge1xuICAgIHByb3RlY3RlZCBhbmd1bGFydGljczI6IEFuZ3VsYXJ0aWNzMjtcbiAgICBwcml2YXRlIGRpbWVuc2lvbnNBbmRNZXRyaWNzO1xuICAgIGNvbnN0cnVjdG9yKGFuZ3VsYXJ0aWNzMjogQW5ndWxhcnRpY3MyKTtcbiAgICBzdGFydFRyYWNraW5nKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgdHJhY2sgcGFnZSB2aWV3LCBzZWU6XG4gICAgICpcbiAgICAgKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vZ3RhZ2pzL3NpbmdsZS1wYWdlLWFwcGxpY2F0aW9ucyN0cmFja2luZ192aXJ0dWFsX3BhZ2V2aWV3c1xuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggcmVsYXRpdmUgdXJsXG4gICAgICovXG4gICAgcGFnZVRyYWNrKHBhdGg6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2VuZCBpbnRlcmFjdGlvbnMgdG8gZ3RhZywgaS5lLiBmb3IgZXZlbnQgdHJhY2tpbmcgaW4gR29vZ2xlIEFuYWx5dGljcy4gU2VlOlxuICAgICAqXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2d0YWdqcy9ldmVudHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudFxuICAgICAqL1xuICAgIGV2ZW50VHJhY2soYWN0aW9uOiBzdHJpbmcsIHByb3BlcnRpZXM/OiBQYXJ0aWFsPEV2ZW50R3N0Pik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXhjZXB0aW9uIFRyYWNrIEV2ZW50IGluIEdTVC4gU2VlOlxuICAgICAqXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2d0YWdqcy9leGNlcHRpb25zXG4gICAgICpcbiAgICAgKi9cbiAgICBleGNlcHRpb25UcmFjayhwcm9wZXJ0aWVzOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVzZXIgVGltaW5ncyBFdmVudCBpbiBHU1QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvcGVydGllcyBDb21wcmlzZWQgb2YgdGhlIG1hbmRhdG9yeSBmaWVsZHM6XG4gICAgICogIC0gbmFtZSAoc3RyaW5nKVxuICAgICAqICAtIHZhbHVlIChudW1iZXIgLSBpbnRlZ2VyKVxuICAgICAqIFByb3BlcnRpZXMgY2FuIGFsc28gaGF2ZSB0aGUgb3B0aW9uYWwgZmllbGRzOlxuICAgICAqICAtIGNhdGVnb3J5IChzdHJpbmcpXG4gICAgICogIC0gbGFiZWwgKHN0cmluZylcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9ndGFnanMvdXNlci10aW1pbmdzXG4gICAgICovXG4gICAgdXNlclRpbWluZ3MocHJvcGVydGllczogVXNlclRpbWluZ3NHc3QpOiB2b2lkO1xuICAgIHByaXZhdGUgY29udmVydFRpbWluZ3M7XG4gICAgc2V0VXNlcm5hbWUodXNlcklkOiBzdHJpbmcgfCB7XG4gICAgICAgIHVzZXJJZDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIH0pOiB2b2lkO1xuICAgIHNldFVzZXJQcm9wZXJ0aWVzKHByb3BlcnRpZXM6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZXREaW1lbnNpb25zQW5kTWV0cmljcztcbiAgICBwcml2YXRlIGV2ZW50VHJhY2tJbnRlcm5hbDtcbiAgICBwcml2YXRlIGNsZWFuUHJvcGVydGllcztcbn1cbiJdfQ==