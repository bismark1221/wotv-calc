import { MonoTypeOperatorFunction, ReplaySubject } from 'rxjs';
import { Angulartics2Settings } from './angulartics2-config';
import { EventTrack, PageTrack, UserTimings } from './angulartics2-interfaces';
import { Angulartics2Token } from './angulartics2-token';
import { RouterlessTracking } from './routerless';
import * as ɵngcc0 from '@angular/core';
export declare class Angulartics2 {
    private tracker;
    settings: Angulartics2Settings;
    pageTrack: ReplaySubject<Partial<PageTrack>>;
    eventTrack: ReplaySubject<Partial<EventTrack>>;
    exceptionTrack: ReplaySubject<any>;
    setAlias: ReplaySubject<string>;
    setUsername: ReplaySubject<string | {
        userId: string | number;
    }>;
    setUserProperties: ReplaySubject<any>;
    setUserPropertiesOnce: ReplaySubject<any>;
    setSuperProperties: ReplaySubject<any>;
    setSuperPropertiesOnce: ReplaySubject<any>;
    userTimings: ReplaySubject<UserTimings>;
    constructor(tracker: RouterlessTracking, setup: Angulartics2Token);
    /** filters all events when developer mode is true */
    filterDeveloperMode<T>(): MonoTypeOperatorFunction<T>;
    protected trackUrlChange(url: string): void;
    /**
     * Use string literals or regular expressions to exclude routes
     * from automatic pageview tracking.
     *
     * @param url location
     */
    protected matchesExcludedRoute(url: string): boolean;
    /**
     * Removes id's from tracked route.
     *  EX: `/project/12981/feature` becomes `/project/feature`
     *
     * @param url current page path
     */
    protected clearUrl(url: string): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Angulartics2, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcnRpY3MyLWNvcmUuZC50cyIsInNvdXJjZXMiOlsiYW5ndWxhcnRpY3MyLWNvcmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbiwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQW5ndWxhcnRpY3MyU2V0dGluZ3MgfSBmcm9tICcuL2FuZ3VsYXJ0aWNzMi1jb25maWcnO1xuaW1wb3J0IHsgRXZlbnRUcmFjaywgUGFnZVRyYWNrLCBVc2VyVGltaW5ncyB9IGZyb20gJy4vYW5ndWxhcnRpY3MyLWludGVyZmFjZXMnO1xuaW1wb3J0IHsgQW5ndWxhcnRpY3MyVG9rZW4gfSBmcm9tICcuL2FuZ3VsYXJ0aWNzMi10b2tlbic7XG5pbXBvcnQgeyBSb3V0ZXJsZXNzVHJhY2tpbmcgfSBmcm9tICcuL3JvdXRlcmxlc3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhcnRpY3MyIHtcbiAgICBwcml2YXRlIHRyYWNrZXI7XG4gICAgc2V0dGluZ3M6IEFuZ3VsYXJ0aWNzMlNldHRpbmdzO1xuICAgIHBhZ2VUcmFjazogUmVwbGF5U3ViamVjdDxQYXJ0aWFsPFBhZ2VUcmFjaz4+O1xuICAgIGV2ZW50VHJhY2s6IFJlcGxheVN1YmplY3Q8UGFydGlhbDxFdmVudFRyYWNrPj47XG4gICAgZXhjZXB0aW9uVHJhY2s6IFJlcGxheVN1YmplY3Q8YW55PjtcbiAgICBzZXRBbGlhczogUmVwbGF5U3ViamVjdDxzdHJpbmc+O1xuICAgIHNldFVzZXJuYW1lOiBSZXBsYXlTdWJqZWN0PHN0cmluZyB8IHtcbiAgICAgICAgdXNlcklkOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgfT47XG4gICAgc2V0VXNlclByb3BlcnRpZXM6IFJlcGxheVN1YmplY3Q8YW55PjtcbiAgICBzZXRVc2VyUHJvcGVydGllc09uY2U6IFJlcGxheVN1YmplY3Q8YW55PjtcbiAgICBzZXRTdXBlclByb3BlcnRpZXM6IFJlcGxheVN1YmplY3Q8YW55PjtcbiAgICBzZXRTdXBlclByb3BlcnRpZXNPbmNlOiBSZXBsYXlTdWJqZWN0PGFueT47XG4gICAgdXNlclRpbWluZ3M6IFJlcGxheVN1YmplY3Q8VXNlclRpbWluZ3M+O1xuICAgIGNvbnN0cnVjdG9yKHRyYWNrZXI6IFJvdXRlcmxlc3NUcmFja2luZywgc2V0dXA6IEFuZ3VsYXJ0aWNzMlRva2VuKTtcbiAgICAvKiogZmlsdGVycyBhbGwgZXZlbnRzIHdoZW4gZGV2ZWxvcGVyIG1vZGUgaXMgdHJ1ZSAqL1xuICAgIGZpbHRlckRldmVsb3Blck1vZGU8VD4oKTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFQ+O1xuICAgIHByb3RlY3RlZCB0cmFja1VybENoYW5nZSh1cmw6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXNlIHN0cmluZyBsaXRlcmFscyBvciByZWd1bGFyIGV4cHJlc3Npb25zIHRvIGV4Y2x1ZGUgcm91dGVzXG4gICAgICogZnJvbSBhdXRvbWF0aWMgcGFnZXZpZXcgdHJhY2tpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIGxvY2F0aW9uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIG1hdGNoZXNFeGNsdWRlZFJvdXRlKHVybDogc3RyaW5nKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGlkJ3MgZnJvbSB0cmFja2VkIHJvdXRlLlxuICAgICAqICBFWDogYC9wcm9qZWN0LzEyOTgxL2ZlYXR1cmVgIGJlY29tZXMgYC9wcm9qZWN0L2ZlYXR1cmVgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsIGN1cnJlbnQgcGFnZSBwYXRoXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNsZWFyVXJsKHVybDogc3RyaW5nKTogc3RyaW5nO1xufVxuIl19