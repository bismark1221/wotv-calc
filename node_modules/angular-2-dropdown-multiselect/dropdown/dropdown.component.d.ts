import { ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, IterableDiffers, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormBuilder, FormControl, Validator } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { MultiSelectSearchFilter } from './search-filter.pipe';
import { IMultiSelectOption, IMultiSelectSettings, IMultiSelectTexts } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class MultiselectDropdownComponent implements OnInit, OnChanges, DoCheck, OnDestroy, ControlValueAccessor, Validator {
    private element;
    private fb;
    private searchFilter;
    private cdRef;
    filterControl: FormControl;
    options: Array<IMultiSelectOption>;
    settings: IMultiSelectSettings;
    texts: IMultiSelectTexts;
    disabled: boolean;
    disabledSelection: boolean;
    searchFunction: (str: string) => RegExp;
    selectionLimitReached: EventEmitter<{}>;
    dropdownClosed: EventEmitter<{}>;
    dropdownOpened: EventEmitter<{}>;
    onAdded: EventEmitter<{}>;
    onRemoved: EventEmitter<{}>;
    onLazyLoad: EventEmitter<{}>;
    onFilter: Observable<string>;
    readonly focusBack: boolean;
    clickedOutside(): void;
    destroyed$: Subject<any>;
    filteredOptions: IMultiSelectOption[];
    lazyLoadOptions: IMultiSelectOption[];
    renderFilteredOptions: IMultiSelectOption[];
    model: any[];
    prevModel: any[];
    parents: any[];
    title: string;
    differ: any;
    numSelected: number;
    isVisible: boolean;
    renderItems: boolean;
    checkAllSearchRegister: Set<any>;
    checkAllStatus: boolean;
    loadedValueIds: any[];
    _focusBack: boolean;
    focusedItem: IMultiSelectOption | undefined;
    defaultSettings: IMultiSelectSettings;
    defaultTexts: IMultiSelectTexts;
    readonly searchLimit: number;
    readonly searchRenderAfter: number;
    readonly searchLimitApplied: boolean;
    private _isVisible;
    private _workerDocClicked;
    constructor(element: ElementRef, fb: FormBuilder, searchFilter: MultiSelectSearchFilter, differs: IterableDiffers, cdRef: ChangeDetectorRef);
    getItemStyle(option: IMultiSelectOption): any;
    getItemStyleSelectionDisabled(): any;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateRenderItems(): void;
    applyFilters(options: any, value: any): IMultiSelectOption[];
    fireModelChange(): void;
    onModelChange: Function;
    onModelTouched: Function;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(isDisabled: boolean): void;
    ngDoCheck(): void;
    validate(_c: AbstractControl): {
        [key: string]: any;
    };
    registerOnValidatorChange(_fn: () => void): void;
    clearSearch(event: Event): void;
    toggleDropdown(e?: Event): void;
    closeDropdown(e?: Event): void;
    isSelected(option: IMultiSelectOption): boolean;
    setSelected(_event: Event, option: IMultiSelectOption): void;
    updateNumSelected(): void;
    updateTitle(): void;
    searchFilterApplied(): boolean;
    addChecks(options: any): void;
    checkAll(): void;
    uncheckAll(): void;
    preventCheckboxCheck(event: Event, option: IMultiSelectOption): void;
    isCheckboxDisabled(option?: IMultiSelectOption): boolean;
    checkScrollPosition(ev: any): void;
    checkScrollPropagation(ev: any, element: any): void;
    trackById(idx: number, selectOption: IMultiSelectOption): any;
    load(): void;
    focusItem(dir: number, e?: Event): void;
    private maybePreventDefault(e?);
    private maybeStopPropagation(e?);
    private _escapeRegExp(str);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiselectDropdownComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiselectDropdownComponent, "ss-multiselect-dropdown", never, { "disabled": "disabled"; "disabledSelection": "disabledSelection"; "searchFunction": "searchFunction"; "settings": "settings"; "texts": "texts"; "options": "options"; }, { "selectionLimitReached": "selectionLimitReached"; "dropdownClosed": "dropdownClosed"; "dropdownOpened": "dropdownOpened"; "onAdded": "onAdded"; "onRemoved": "onRemoved"; "onLazyLoad": "onLazyLoad"; "onFilter": "onFilter"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRyb3Bkb3duLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRG9DaGVjaywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJdGVyYWJsZURpZmZlcnMsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1CdWlsZGVyLCBGb3JtQ29udHJvbCwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTXVsdGlTZWxlY3RTZWFyY2hGaWx0ZXIgfSBmcm9tICcuL3NlYXJjaC1maWx0ZXIucGlwZSc7XG5pbXBvcnQgeyBJTXVsdGlTZWxlY3RPcHRpb24sIElNdWx0aVNlbGVjdFNldHRpbmdzLCBJTXVsdGlTZWxlY3RUZXh0cyB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTXVsdGlzZWxlY3REcm9wZG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBEb0NoZWNrLCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3Ige1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIGZiO1xuICAgIHByaXZhdGUgc2VhcmNoRmlsdGVyO1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgZmlsdGVyQ29udHJvbDogRm9ybUNvbnRyb2w7XG4gICAgb3B0aW9uczogQXJyYXk8SU11bHRpU2VsZWN0T3B0aW9uPjtcbiAgICBzZXR0aW5nczogSU11bHRpU2VsZWN0U2V0dGluZ3M7XG4gICAgdGV4dHM6IElNdWx0aVNlbGVjdFRleHRzO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGRpc2FibGVkU2VsZWN0aW9uOiBib29sZWFuO1xuICAgIHNlYXJjaEZ1bmN0aW9uOiAoc3RyOiBzdHJpbmcpID0+IFJlZ0V4cDtcbiAgICBzZWxlY3Rpb25MaW1pdFJlYWNoZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgZHJvcGRvd25DbG9zZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgZHJvcGRvd25PcGVuZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgb25BZGRlZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBvblJlbW92ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XG4gICAgb25MYXp5TG9hZDogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBvbkZpbHRlcjogT2JzZXJ2YWJsZTxzdHJpbmc+O1xuICAgIHJlYWRvbmx5IGZvY3VzQmFjazogYm9vbGVhbjtcbiAgICBjbGlja2VkT3V0c2lkZSgpOiB2b2lkO1xuICAgIGRlc3Ryb3llZCQ6IFN1YmplY3Q8YW55PjtcbiAgICBmaWx0ZXJlZE9wdGlvbnM6IElNdWx0aVNlbGVjdE9wdGlvbltdO1xuICAgIGxhenlMb2FkT3B0aW9uczogSU11bHRpU2VsZWN0T3B0aW9uW107XG4gICAgcmVuZGVyRmlsdGVyZWRPcHRpb25zOiBJTXVsdGlTZWxlY3RPcHRpb25bXTtcbiAgICBtb2RlbDogYW55W107XG4gICAgcHJldk1vZGVsOiBhbnlbXTtcbiAgICBwYXJlbnRzOiBhbnlbXTtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRpZmZlcjogYW55O1xuICAgIG51bVNlbGVjdGVkOiBudW1iZXI7XG4gICAgaXNWaXNpYmxlOiBib29sZWFuO1xuICAgIHJlbmRlckl0ZW1zOiBib29sZWFuO1xuICAgIGNoZWNrQWxsU2VhcmNoUmVnaXN0ZXI6IFNldDxhbnk+O1xuICAgIGNoZWNrQWxsU3RhdHVzOiBib29sZWFuO1xuICAgIGxvYWRlZFZhbHVlSWRzOiBhbnlbXTtcbiAgICBfZm9jdXNCYWNrOiBib29sZWFuO1xuICAgIGZvY3VzZWRJdGVtOiBJTXVsdGlTZWxlY3RPcHRpb24gfCB1bmRlZmluZWQ7XG4gICAgZGVmYXVsdFNldHRpbmdzOiBJTXVsdGlTZWxlY3RTZXR0aW5ncztcbiAgICBkZWZhdWx0VGV4dHM6IElNdWx0aVNlbGVjdFRleHRzO1xuICAgIHJlYWRvbmx5IHNlYXJjaExpbWl0OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgc2VhcmNoUmVuZGVyQWZ0ZXI6IG51bWJlcjtcbiAgICByZWFkb25seSBzZWFyY2hMaW1pdEFwcGxpZWQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaXNWaXNpYmxlO1xuICAgIHByaXZhdGUgX3dvcmtlckRvY0NsaWNrZWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgZmI6IEZvcm1CdWlsZGVyLCBzZWFyY2hGaWx0ZXI6IE11bHRpU2VsZWN0U2VhcmNoRmlsdGVyLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgZ2V0SXRlbVN0eWxlKG9wdGlvbjogSU11bHRpU2VsZWN0T3B0aW9uKTogYW55O1xuICAgIGdldEl0ZW1TdHlsZVNlbGVjdGlvbkRpc2FibGVkKCk6IGFueTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgdXBkYXRlUmVuZGVySXRlbXMoKTogdm9pZDtcbiAgICBhcHBseUZpbHRlcnMob3B0aW9uczogYW55LCB2YWx1ZTogYW55KTogSU11bHRpU2VsZWN0T3B0aW9uW107XG4gICAgZmlyZU1vZGVsQ2hhbmdlKCk6IHZvaWQ7XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICB2YWxpZGF0ZShfYzogQWJzdHJhY3RDb250cm9sKToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKF9mbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgY2xlYXJTZWFyY2goZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICB0b2dnbGVEcm9wZG93bihlPzogRXZlbnQpOiB2b2lkO1xuICAgIGNsb3NlRHJvcGRvd24oZT86IEV2ZW50KTogdm9pZDtcbiAgICBpc1NlbGVjdGVkKG9wdGlvbjogSU11bHRpU2VsZWN0T3B0aW9uKTogYm9vbGVhbjtcbiAgICBzZXRTZWxlY3RlZChfZXZlbnQ6IEV2ZW50LCBvcHRpb246IElNdWx0aVNlbGVjdE9wdGlvbik6IHZvaWQ7XG4gICAgdXBkYXRlTnVtU2VsZWN0ZWQoKTogdm9pZDtcbiAgICB1cGRhdGVUaXRsZSgpOiB2b2lkO1xuICAgIHNlYXJjaEZpbHRlckFwcGxpZWQoKTogYm9vbGVhbjtcbiAgICBhZGRDaGVja3Mob3B0aW9uczogYW55KTogdm9pZDtcbiAgICBjaGVja0FsbCgpOiB2b2lkO1xuICAgIHVuY2hlY2tBbGwoKTogdm9pZDtcbiAgICBwcmV2ZW50Q2hlY2tib3hDaGVjayhldmVudDogRXZlbnQsIG9wdGlvbjogSU11bHRpU2VsZWN0T3B0aW9uKTogdm9pZDtcbiAgICBpc0NoZWNrYm94RGlzYWJsZWQob3B0aW9uPzogSU11bHRpU2VsZWN0T3B0aW9uKTogYm9vbGVhbjtcbiAgICBjaGVja1Njcm9sbFBvc2l0aW9uKGV2OiBhbnkpOiB2b2lkO1xuICAgIGNoZWNrU2Nyb2xsUHJvcGFnYXRpb24oZXY6IGFueSwgZWxlbWVudDogYW55KTogdm9pZDtcbiAgICB0cmFja0J5SWQoaWR4OiBudW1iZXIsIHNlbGVjdE9wdGlvbjogSU11bHRpU2VsZWN0T3B0aW9uKTogYW55O1xuICAgIGxvYWQoKTogdm9pZDtcbiAgICBmb2N1c0l0ZW0oZGlyOiBudW1iZXIsIGU/OiBFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBtYXliZVByZXZlbnREZWZhdWx0KGU/KTtcbiAgICBwcml2YXRlIG1heWJlU3RvcFByb3BhZ2F0aW9uKGU/KTtcbiAgICBwcml2YXRlIF9lc2NhcGVSZWdFeHAoc3RyKTtcbn1cbiJdfQ==