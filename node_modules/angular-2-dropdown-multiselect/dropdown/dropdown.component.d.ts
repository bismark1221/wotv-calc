import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/takeUntil';
import { DoCheck, ElementRef, EventEmitter, IterableDiffers, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, FormBuilder, FormControl, Validator } from '@angular/forms';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { MultiSelectSearchFilter } from './search-filter.pipe';
import { IMultiSelectOption, IMultiSelectSettings, IMultiSelectTexts } from './types';
export declare class MultiselectDropdown implements OnInit, OnChanges, DoCheck, OnDestroy, ControlValueAccessor, Validator {
    private element;
    private fb;
    private searchFilter;
    filterControl: FormControl;
    options: Array<IMultiSelectOption>;
    settings: IMultiSelectSettings;
    texts: IMultiSelectTexts;
    disabled: boolean;
    disabledSelection: false;
    selectionLimitReached: EventEmitter<{}>;
    dropdownClosed: EventEmitter<{}>;
    dropdownOpened: EventEmitter<{}>;
    onAdded: EventEmitter<{}>;
    onRemoved: EventEmitter<{}>;
    onLazyLoad: EventEmitter<{}>;
    onFilter: Observable<string>;
    onClick(target: HTMLElement): void;
    destroyed$: Subject<any>;
    filteredOptions: IMultiSelectOption[];
    renderFilteredOptions: IMultiSelectOption[];
    model: any[];
    parents: any[];
    title: string;
    differ: any;
    numSelected: number;
    isVisible: boolean;
    renderItems: boolean;
    defaultSettings: IMultiSelectSettings;
    defaultTexts: IMultiSelectTexts;
    readonly searchLimit: number;
    readonly searchRenderAfter: number;
    readonly searchLimitApplied: boolean;
    private _isVisible;
    private _workerDocClicked;
    constructor(element: ElementRef, fb: FormBuilder, searchFilter: MultiSelectSearchFilter, differs: IterableDiffers);
    getItemStyle(option: IMultiSelectOption): any;
    getItemStyleSelectionDisabled(): any;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateRenderItems(): void;
    onModelChange: Function;
    onModelTouched: Function;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(isDisabled: boolean): void;
    ngDoCheck(): void;
    validate(_c: AbstractControl): {
        [key: string]: any;
    };
    registerOnValidatorChange(_fn: () => void): void;
    clearSearch(event: Event): void;
    toggleDropdown(): void;
    isSelected(option: IMultiSelectOption): boolean;
    setSelected(_event: Event, option: IMultiSelectOption): void;
    updateNumSelected(): void;
    updateTitle(): void;
    searchFilterApplied(): boolean;
    checkAll(): void;
    uncheckAll(): void;
    preventCheckboxCheck(event: Event, option: IMultiSelectOption): void;
    isCheckboxDisabled(): boolean;
    checkScrollPosition(ev: any): void;
    checkScrollPropagation(ev: any, element: any): void;
    load(): void;
}
