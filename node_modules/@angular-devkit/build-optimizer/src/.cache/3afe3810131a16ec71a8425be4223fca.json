{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/angular-2-local-storage/dist/local-storage.service.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/angular-2-local-storage/dist/local-storage.service.js","mtime":1529481785371},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nvar __param = /*@__PURE__*/ require(\"tslib\").__param;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar DEPRECATED = 'This function is deprecated.';\nvar LOCAL_STORAGE_NOT_SUPPORTED = 'LOCAL_STORAGE_NOT_SUPPORTED';\nvar LocalStorageService = /** @class */ /*@__PURE__*/ (function () {\n    function LocalStorageService(config) {\n        var _this = this;\n        this.isSupported = false;\n        this.notifyOptions = {\n            setItem: false,\n            removeItem: false\n        };\n        this.prefix = 'ls';\n        this.storageType = 'localStorage';\n        this.errors = new rxjs_1.Subscriber();\n        this.removeItems = new rxjs_1.Subscriber();\n        this.setItems = new rxjs_1.Subscriber();\n        this.warnings = new rxjs_1.Subscriber();\n        var notifyOptions = config.notifyOptions, prefix = config.prefix, storageType = config.storageType;\n        if (notifyOptions != null) {\n            var setItem = notifyOptions.setItem, removeItem = notifyOptions.removeItem;\n            this.setNotify(!!setItem, !!removeItem);\n        }\n        if (prefix != null) {\n            this.setPrefix(prefix);\n        }\n        if (storageType != null) {\n            this.setStorageType(storageType);\n        }\n        this.errors$ = new rxjs_1.Observable(function (observer) { return _this.errors = observer; }).pipe(operators_1.share());\n        this.removeItems$ = new rxjs_1.Observable(function (observer) { return _this.removeItems = observer; }).pipe(operators_1.share());\n        this.setItems$ = new rxjs_1.Observable(function (observer) { return _this.setItems = observer; }).pipe(operators_1.share());\n        this.warnings$ = new rxjs_1.Observable(function (observer) { return _this.warnings = observer; }).pipe(operators_1.share());\n        this.isSupported = this.checkSupport();\n    }\n    LocalStorageService.prototype.add = function (key, value) {\n        if (console && console.warn) {\n            console.warn(DEPRECATED);\n            console.warn('Use `LocalStorageService.set` instead.');\n        }\n        return this.set(key, value);\n    };\n    LocalStorageService.prototype.clearAll = function (regularExpression) {\n        // Setting both regular expressions independently\n        // Empty strings result in catchall RegExp\n        var prefixRegex = !!this.prefix ? new RegExp('^' + this.prefix) : new RegExp('');\n        var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp('');\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return false;\n        }\n        var prefixLength = this.prefix.length;\n        for (var key in this.webStorage) {\n            // Only remove items that are for this app and match the regular expression\n            if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {\n                try {\n                    this.remove(key.substr(prefixLength));\n                }\n                catch (e) {\n                    this.errors.next(e.message);\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    LocalStorageService.prototype.deriveKey = function (key) {\n        return \"\" + this.prefix + key;\n    };\n    LocalStorageService.prototype.get = function (key) {\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return null;\n        }\n        var item = this.webStorage ? this.webStorage.getItem(this.deriveKey(key)) : null;\n        // FIXME: not a perfect solution, since a valid 'null' string can't be stored\n        if (!item || item === 'null') {\n            return null;\n        }\n        try {\n            return JSON.parse(item);\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    LocalStorageService.prototype.getStorageType = function () {\n        return this.storageType;\n    };\n    LocalStorageService.prototype.keys = function () {\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return [];\n        }\n        var prefixLength = this.prefix.length;\n        var keys = [];\n        for (var key in this.webStorage) {\n            // Only return keys that are for this app\n            if (key.substr(0, prefixLength) === this.prefix) {\n                try {\n                    keys.push(key.substr(prefixLength));\n                }\n                catch (e) {\n                    this.errors.next(e.message);\n                    return [];\n                }\n            }\n        }\n        return keys;\n    };\n    LocalStorageService.prototype.length = function () {\n        var count = 0;\n        var storage = this.webStorage;\n        for (var i = 0; i < storage.length; i++) {\n            if (storage.key(i).indexOf(this.prefix) === 0) {\n                count += 1;\n            }\n        }\n        return count;\n    };\n    LocalStorageService.prototype.remove = function () {\n        var _this = this;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var result = true;\n        keys.forEach(function (key) {\n            if (!_this.isSupported) {\n                _this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n                result = false;\n            }\n            try {\n                _this.webStorage.removeItem(_this.deriveKey(key));\n                if (_this.notifyOptions.removeItem) {\n                    _this.removeItems.next({\n                        key: key,\n                        storageType: _this.storageType\n                    });\n                }\n            }\n            catch (e) {\n                _this.errors.next(e.message);\n                result = false;\n            }\n        });\n        return result;\n    };\n    LocalStorageService.prototype.set = function (key, value) {\n        // Let's convert `undefined` values to `null` to get the value consistent\n        if (value === undefined) {\n            value = null;\n        }\n        else {\n            value = JSON.stringify(value);\n        }\n        if (!this.isSupported) {\n            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n            return false;\n        }\n        try {\n            if (this.webStorage) {\n                this.webStorage.setItem(this.deriveKey(key), value);\n            }\n            if (this.notifyOptions.setItem) {\n                this.setItems.next({\n                    key: key,\n                    newvalue: value,\n                    storageType: this.storageType\n                });\n            }\n        }\n        catch (e) {\n            this.errors.next(e.message);\n            return false;\n        }\n        return true;\n    };\n    LocalStorageService.prototype.checkSupport = function () {\n        try {\n            var supported = this.storageType in window\n                && window[this.storageType] !== null;\n            if (supported) {\n                this.webStorage = window[this.storageType];\n                // When Safari (OS X or iOS) is in private browsing mode, it\n                // appears as though localStorage is available, but trying to\n                // call .setItem throws an exception.\n                //\n                // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made\n                // to add something to storage that exceeded the quota.\"\n                var key = this.deriveKey(\"__\" + Math.round(Math.random() * 1e7));\n                this.webStorage.setItem(key, '');\n                this.webStorage.removeItem(key);\n            }\n            return supported;\n        }\n        catch (e) {\n            this.errors.next(e.message);\n            return false;\n        }\n    };\n    LocalStorageService.prototype.setPrefix = function (prefix) {\n        this.prefix = prefix;\n        // If there is a prefix set in the config let's use that with an appended\n        // period for readability:\n        var PERIOD = '.';\n        if (this.prefix && !this.prefix.endsWith(PERIOD)) {\n            this.prefix = !!this.prefix ? \"\" + this.prefix + PERIOD : '';\n        }\n    };\n    LocalStorageService.prototype.setStorageType = function (storageType) {\n        this.storageType = storageType;\n    };\n    LocalStorageService.prototype.setNotify = function (setItem, removeItem) {\n        if (setItem != null) {\n            this.notifyOptions.setItem = setItem;\n        }\n        if (removeItem != null) {\n            this.notifyOptions.removeItem = removeItem;\n        }\n    };\n    LocalStorageService = __decorate([\n        core_1.Injectable(),\n        __param(0, core_1.Inject('LOCAL_STORAGE_SERVICE_CONFIG'))\n    ], LocalStorageService);\n    return LocalStorageService;\n}());\nexports.LocalStorageService = LocalStorageService;\n",null]}