{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/angulartics2/dist/es5/providers/gtm/angulartics2-gtm.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/angulartics2/dist/es5/providers/gtm/angulartics2-gtm.js","mtime":1529481785441},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar angulartics2_1 = require(\"../../core/angulartics2\");\nvar Angulartics2GoogleTagManager = /** @class */ /*@__PURE__*/ (function () {\n    function Angulartics2GoogleTagManager(angulartics2) {\n        var _this = this;\n        this.angulartics2 = angulartics2;\n        // The dataLayer needs to be initialized\n        if (typeof dataLayer !== 'undefined' && dataLayer) {\n            dataLayer = window.dataLayer = window.dataLayer || [];\n        }\n        this.angulartics2.settings.pageTracking.trackRelativePath = true;\n        // Set the default settings for this module\n        this.angulartics2.settings.gtm = {\n            userId: null\n        };\n        this.angulartics2.pageTrack.subscribe(function (x) { return _this.pageTrack(x.path); });\n        this.angulartics2.eventTrack.subscribe(function (x) { return _this.eventTrack(x.action, x.properties); });\n        this.angulartics2.exceptionTrack.subscribe(function (x) { return _this.exceptionTrack(x); });\n        this.angulartics2.setUsername.subscribe(function (x) { return _this.setUsername(x); });\n    }\n    Angulartics2GoogleTagManager.prototype.pageTrack = function (path) {\n        if (typeof dataLayer !== 'undefined' && dataLayer) {\n            dataLayer.push({\n                'event': 'Page View',\n                'content-name': path,\n                'userId': this.angulartics2.settings.gtm.userId\n            });\n        }\n    };\n    /**\n     * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics\n     * @name eventTrack\n     *\n     * @param {string} action Required 'action' (string) associated with the event\n     * @param {object} properties Comprised of the mandatory field 'category' (string) and optional  fields 'label' (string), 'value' (integer) and 'noninteraction' (boolean)\n     */\n    Angulartics2GoogleTagManager.prototype.eventTrack = function (action, properties) {\n        // Set a default GTM category\n        properties = properties || {};\n        if (typeof dataLayer !== 'undefined' && dataLayer) {\n            dataLayer.push({\n                event: properties.event || 'interaction',\n                target: properties.category || 'Event',\n                action: action,\n                label: properties.label,\n                value: properties.value,\n                interactionType: properties.noninteraction,\n                userId: this.angulartics2.settings.gtm.userId\n            });\n        }\n    };\n    /**\n     * Exception Track Event in GTM\n     * @name exceptionTrack\n     *\n     * @param {object} properties Comprised of the mandatory fields 'appId' (string), 'appName' (string) and 'appVersion' (string) and\n     * optional  fields 'fatal' (boolean) and 'description' (string)\n     */\n    Angulartics2GoogleTagManager.prototype.exceptionTrack = function (properties) {\n        if (!properties || !properties.appId || !properties.appName || !properties.appVersion) {\n            console.error('Must be setted appId, appName and appVersion.');\n            return;\n        }\n        if (properties.fatal === undefined) {\n            console.log('No \"fatal\" provided, sending with fatal=true');\n            properties.exFatal = true;\n        }\n        properties.exDescription = properties.event ? properties.event.stack : properties.description;\n        this.eventTrack(\"Exception thrown for \" + properties.appName + \" <\" + properties.appId + \"@\" + properties.appVersion + \">\", {\n            'category': 'Exception',\n            'label': properties.exDescription\n        });\n    };\n    /**\n     * Set userId for use with Universal Analytics User ID feature\n     * @name setUsername\n     *\n     * @param {string} userId Required 'userId' value (string) used to identify user cross-device in Google Analytics\n     */\n    Angulartics2GoogleTagManager.prototype.setUsername = function (userId) {\n        this.angulartics2.settings.gtm.userId = userId;\n    };\n    Angulartics2GoogleTagManager.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return Angulartics2GoogleTagManager;\n}());\nexports.Angulartics2GoogleTagManager = Angulartics2GoogleTagManager;\n",null]}