{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/ngx-clipboard/dist/src/clipboard.service.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/ngx-clipboard/dist/src/clipboard.service.js","mtime":1516506149000},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Inject, Injectable, Optional, SkipSelf } from \"@angular/core\";\nimport { DOCUMENT } from \"@angular/platform-browser\";\nimport { WINDOW } from \"ngx-window-token\";\nvar ClipboardService = /*@__PURE__*/ (function () {\n    function ClipboardService(document, window) {\n        this.document = document;\n        this.window = window;\n    }\n    Object.defineProperty(ClipboardService.prototype, \"isSupported\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    ClipboardService.prototype.isTargetValid = /**\n     * @param {?} element\n     * @return {?}\n     */\n        function (element) {\n            if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n                if (element.hasAttribute('disabled')) {\n                    // tslint:disable-next-line:max-line-length\n                    throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                }\n                return true;\n            }\n            throw new Error('Target should be input or textarea');\n        };\n    /**\n     * copyFromInputElement\n     * @param {?} targetElm\n     * @param {?} renderer\n     * @return {?}\n     */\n    ClipboardService.prototype.copyFromInputElement = /**\n     * copyFromInputElement\n     * @param {?} targetElm\n     * @param {?} renderer\n     * @return {?}\n     */\n        function (targetElm, renderer) {\n            try {\n                this.selectTarget(targetElm, renderer);\n                var /** @type {?} */ re = this.copyText();\n                this.clearSelection(targetElm, this.window);\n                return re;\n            }\n            catch ( /** @type {?} */error) {\n                return false;\n            }\n        };\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     * @param {?} content\n     * @param {?} renderer\n     * @return {?}\n     */\n    ClipboardService.prototype.copyFromContent = /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     * @param {?} content\n     * @param {?} renderer\n     * @return {?}\n     */\n        function (content, renderer) {\n            if (!this.tempTextArea) {\n                this.tempTextArea = this.createTempTextArea(this.document, this.window);\n                this.document.body.appendChild(this.tempTextArea);\n            }\n            this.tempTextArea.value = content;\n            return this.copyFromInputElement(this.tempTextArea, renderer);\n        };\n    /**\n     * @return {?}\n     */\n    ClipboardService.prototype.destroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.tempTextArea) {\n                this.document.body.removeChild(this.tempTextArea);\n                this.tempTextArea = undefined;\n            }\n        };\n    /**\n     * @param {?} inputElement\n     * @param {?} renderer\n     * @return {?}\n     */\n    ClipboardService.prototype.selectTarget = /**\n     * @param {?} inputElement\n     * @param {?} renderer\n     * @return {?}\n     */\n        function (inputElement, renderer) {\n            renderer.invokeElementMethod(inputElement, 'select');\n            renderer.invokeElementMethod(inputElement, 'setSelectionRange', [0, inputElement.value.length]);\n            return inputElement.value.length;\n        };\n    /**\n     * @return {?}\n     */\n    ClipboardService.prototype.copyText = /**\n     * @return {?}\n     */\n        function () {\n            return this.document.execCommand('copy');\n        };\n    /**\n     * @param {?} inputElement\n     * @param {?} window\n     * @return {?}\n     */\n    ClipboardService.prototype.clearSelection = /**\n     * @param {?} inputElement\n     * @param {?} window\n     * @return {?}\n     */\n        function (inputElement, window) {\n            // tslint:disable-next-line:no-unused-expression\n            inputElement && inputElement.blur();\n            window.getSelection().removeAllRanges();\n        };\n    /**\n     * @param {?} doc\n     * @param {?} window\n     * @return {?}\n     */\n    ClipboardService.prototype.createTempTextArea = /**\n     * @param {?} doc\n     * @param {?} window\n     * @return {?}\n     */\n        function (doc, window) {\n            var /** @type {?} */ isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n            var /** @type {?} */ ta;\n            ta = doc.createElement('textarea');\n            // Prevent zooming on iOS\n            ta.style.fontSize = '12pt';\n            // Reset box model\n            ta.style.border = '0';\n            ta.style.padding = '0';\n            ta.style.margin = '0';\n            // Move element out of screen horizontally\n            ta.style.position = 'absolute';\n            ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n            // Move element to the same position vertically\n            var /** @type {?} */ yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n            ta.style.top = yPosition + 'px';\n            ta.setAttribute('readonly', '');\n            return ta;\n        };\n    return ClipboardService;\n}());\nexport { ClipboardService };\nfunction ClipboardService_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ClipboardService.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ClipboardService.ctorParameters;\n    /** @type {?} */\n    ClipboardService.prototype.tempTextArea;\n    /** @type {?} */\n    ClipboardService.prototype.document;\n    /** @type {?} */\n    ClipboardService.prototype.window;\n}\n/**\n * @param {?} doc\n * @param {?} win\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc, win, parentDispatcher) {\n    return parentDispatcher || new ClipboardService(doc, win);\n}\nexport var /** @type {?} */ CLIPBOARD_SERVICE_PROVIDER = {\n    deps: [/** @type {?} */ (DOCUMENT), /** @type {?} */ (WINDOW), [new Optional(), new SkipSelf(), ClipboardService]\n    ],\n    provide: ClipboardService,\n    useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY\n};\n//# sourceMappingURL=clipboard.service.js.map\n",null]}