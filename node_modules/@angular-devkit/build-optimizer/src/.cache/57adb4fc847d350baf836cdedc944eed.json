{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/accordion/accordion.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/accordion/accordion.js","mtime":1529481784137},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["import { Component, ContentChildren, Directive, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { isString } from '../util/util';\nimport { NgbAccordionConfig } from './accordion-config';\nvar nextId = 0;\n/**\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\n */\nvar NgbPanelTitle = /*@__PURE__*/ (function () {\n    function NgbPanelTitle(templateRef) {\n        this.templateRef = templateRef;\n    }\n    return NgbPanelTitle;\n}());\nexport { NgbPanelTitle };\n/**\n * This directive must be used to wrap accordion panel content.\n */\nvar NgbPanelContent = /*@__PURE__*/ (function () {\n    function NgbPanelContent(templateRef) {\n        this.templateRef = templateRef;\n    }\n    return NgbPanelContent;\n}());\nexport { NgbPanelContent };\n/**\n * The NgbPanel directive represents an individual panel with the title and collapsible\n * content\n */\nvar NgbPanel = /*@__PURE__*/ (function () {\n    function NgbPanel() {\n        /**\n           *  A flag determining whether the panel is disabled or not.\n           *  When disabled, the panel cannot be toggled.\n           */\n        this.disabled = false;\n        /**\n           *  An optional id for the panel. The id should be unique.\n           *  If not provided, it will be auto-generated.\n           */\n        this.id = \"ngb-panel-\" + nextId++;\n        /**\n           * A flag telling if the panel is currently open\n           */\n        this.isOpen = false;\n    }\n    NgbPanel.prototype.ngAfterContentChecked = function () {\n        // We are using @ContentChildren instead of @ContantChild as in the Angular version being used\n        // only @ContentChildren allows us to specify the {descendants: false} option.\n        // Without {descendants: false} we are hitting bugs described in:\n        // https://github.com/ng-bootstrap/ng-bootstrap/issues/2240\n        this.titleTpl = this.titleTpls.first;\n        this.contentTpl = this.contentTpls.first;\n    };\n    return NgbPanel;\n}());\nexport { NgbPanel };\n/**\n * The NgbAccordion directive is a collection of panels.\n * It can assure that only one panel can be opened at a time.\n */\nvar NgbAccordion = /*@__PURE__*/ (function () {\n    function NgbAccordion(config) {\n        /**\n           * An array or comma separated strings of panel identifiers that should be opened\n           */\n        this.activeIds = [];\n        /**\n           * Whether the closed panels should be hidden without destroying them\n           */\n        this.destroyOnHide = true;\n        /**\n           * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\n           */\n        this.panelChange = new EventEmitter();\n        this.type = config.type;\n        this.closeOtherPanels = config.closeOthers;\n    }\n    /**\n     * Programmatically toggle a panel with a given id.\n     */\n    /**\n       * Programmatically toggle a panel with a given id.\n       */\n    NgbAccordion.prototype.toggle = /**\n       * Programmatically toggle a panel with a given id.\n       */\n        function (panelId) {\n            var panel = this.panels.find(function (p) { return p.id === panelId; });\n            if (panel && !panel.disabled) {\n                var defaultPrevented_1 = false;\n                this.panelChange.emit({ panelId: panelId, nextState: !panel.isOpen, preventDefault: function () { defaultPrevented_1 = true; } });\n                if (!defaultPrevented_1) {\n                    panel.isOpen = !panel.isOpen;\n                    if (this.closeOtherPanels) {\n                        this._closeOthers(panelId);\n                    }\n                    this._updateActiveIds();\n                }\n            }\n        };\n    NgbAccordion.prototype.ngAfterContentChecked = function () {\n        var _this = this;\n        // active id updates\n        if (isString(this.activeIds)) {\n            this.activeIds = this.activeIds.split(/\\s*,\\s*/);\n        }\n        // update panels open states\n        this.panels.forEach(function (panel) { return panel.isOpen = !panel.disabled && _this.activeIds.indexOf(panel.id) > -1; });\n        // closeOthers updates\n        if (this.activeIds.length > 1 && this.closeOtherPanels) {\n            this._closeOthers(this.activeIds[0]);\n            this._updateActiveIds();\n        }\n    };\n    NgbAccordion.prototype._closeOthers = function (panelId) {\n        this.panels.forEach(function (panel) {\n            if (panel.id !== panelId) {\n                panel.isOpen = false;\n            }\n        });\n    };\n    NgbAccordion.prototype._updateActiveIds = function () {\n        this.activeIds = this.panels.filter(function (panel) { return panel.isOpen && !panel.disabled; }).map(function (panel) { return panel.id; });\n    };\n    return NgbAccordion;\n}());\nexport { NgbAccordion };\n//# sourceMappingURL=accordion.js.map\n",null]}