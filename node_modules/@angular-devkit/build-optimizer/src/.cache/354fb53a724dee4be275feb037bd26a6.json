{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/ngx-clipboard/dist/src/clipboard.directive.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/ngx-clipboard/dist/src/clipboard.directive.js","mtime":1516506149000},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Directive, EventEmitter, HostListener, Input, Output, Renderer } from \"@angular/core\";\nimport { ClipboardService } from \"./clipboard.service\";\nvar ClipboardDirective = /*@__PURE__*/ (function () {\n    function ClipboardDirective(clipboardSrv, renderer) {\n        this.clipboardSrv = clipboardSrv;\n        this.renderer = renderer;\n        this.cbOnSuccess = new EventEmitter();\n        this.cbOnError = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ClipboardDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () { };\n    /**\n     * @return {?}\n     */\n    ClipboardDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.clipboardSrv.destroy();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ClipboardDirective.prototype.onClick = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (!this.clipboardSrv.isSupported) {\n                this.handleResult(false, undefined);\n            }\n            else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n                this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm, this.renderer), this.targetElm.value);\n            }\n            else if (this.cbContent) {\n                this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.renderer), this.cbContent);\n            }\n        };\n    /**\n     * Fires an event based on the copy operation result.\n     * @param {?} succeeded\n     * @param {?} copiedContent\n     * @return {?}\n     */\n    ClipboardDirective.prototype.handleResult = /**\n     * Fires an event based on the copy operation result.\n     * @param {?} succeeded\n     * @param {?} copiedContent\n     * @return {?}\n     */\n        function (succeeded, copiedContent) {\n            if (succeeded) {\n                this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent });\n            }\n            else {\n                this.cbOnError.emit({ isSuccess: false });\n            }\n        };\n    return ClipboardDirective;\n}());\nexport { ClipboardDirective };\nfunction ClipboardDirective_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    ClipboardDirective.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    ClipboardDirective.ctorParameters;\n    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\n    ClipboardDirective.propDecorators;\n    /** @type {?} */\n    ClipboardDirective.prototype.targetElm;\n    /** @type {?} */\n    ClipboardDirective.prototype.cbContent;\n    /** @type {?} */\n    ClipboardDirective.prototype.cbOnSuccess;\n    /** @type {?} */\n    ClipboardDirective.prototype.cbOnError;\n    /** @type {?} */\n    ClipboardDirective.prototype.clipboardSrv;\n    /** @type {?} */\n    ClipboardDirective.prototype.renderer;\n}\n//# sourceMappingURL=clipboard.directive.js.map\n",null]}