{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/datepicker/hijri/ngb-calendar-islamic-civil.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/datepicker/hijri/ngb-calendar-islamic-civil.js","mtime":1529481784300},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { NgbCalendarHijri } from './ngb-calendar-hijri';\nimport { NgbDate } from '../ngb-date';\nimport { Injectable } from '@angular/core';\nfunction isGregorianLeapYear(date) {\n    var year = date.getFullYear();\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nfunction mod(a, b) {\n    return a - b * Math.floor(a / b);\n}\n/**\n * The civil calendar is one type of Hijri calendars used in islamic countries.\n * Uses a fixed cycle of alternating 29- and 30-day months,\n * with a leap day added to the last month of 11 out of every 30 years.\n * http://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types\n * All the calculations here are based on the equations from \"Calendrical Calculations\" By Edward M. Reingold, Nachum\n * Dershowitz.\n */\nvar GREGORIAN_EPOCH = 1721425.5;\nvar ISLAMIC_EPOCH = 1948439.5;\nvar NgbCalendarIslamicCivil = /*@__PURE__*/ (function (_super) {\n    __extends(NgbCalendarIslamicCivil, _super);\n    function NgbCalendarIslamicCivil() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n     * `gdate` is a JS Date to be converted to Hijri.\n     */\n    /**\n       * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n       * `gdate` is a JS Date to be converted to Hijri.\n       */\n    NgbCalendarIslamicCivil.prototype.fromGregorian = /**\n       * Returns the equivalent islamic(civil) date value for a give input Gregorian date.\n       * `gdate` is a JS Date to be converted to Hijri.\n       */\n        function (gdate) {\n            var date = new Date(gdate);\n            var gYear = date.getFullYear(), gMonth = date.getMonth(), gDay = date.getDate();\n            var julianDay = GREGORIAN_EPOCH - 1 + 365 * (gYear - 1) + Math.floor((gYear - 1) / 4) +\n                -Math.floor((gYear - 1) / 100) + Math.floor((gYear - 1) / 400) +\n                Math.floor((367 * (gMonth + 1) - 362) / 12 + (gMonth + 1 <= 2 ? 0 : isGregorianLeapYear(date) ? -1 : -2) + gDay);\n            julianDay = Math.floor(julianDay) + 0.5;\n            var days = julianDay - ISLAMIC_EPOCH;\n            var hYear = Math.floor((30 * days + 10646) / 10631.0);\n            var hMonth = Math.ceil((days - 29 - this._getYearStart(hYear)) / 29.5);\n            hMonth = Math.min(hMonth, 11);\n            var hDay = Math.ceil(days - this._getMonthStart(hYear, hMonth)) + 1;\n            return new NgbDate(hYear, hMonth + 1, hDay);\n        };\n    /**\n     * Returns the equivalent JS date value for a give input islamic(civil) date.\n     * `hijriDate` is an islamic(civil) date to be converted to Gregorian.\n     */\n    /**\n       * Returns the equivalent JS date value for a give input islamic(civil) date.\n       * `hijriDate` is an islamic(civil) date to be converted to Gregorian.\n       */\n    NgbCalendarIslamicCivil.prototype.toGregorian = /**\n       * Returns the equivalent JS date value for a give input islamic(civil) date.\n       * `hijriDate` is an islamic(civil) date to be converted to Gregorian.\n       */\n        function (hijriDate) {\n            var hYear = hijriDate.year;\n            var hMonth = hijriDate.month - 1;\n            var hDate = hijriDate.day;\n            var julianDay = hDate + Math.ceil(29.5 * hMonth) + (hYear - 1) * 354 + Math.floor((3 + 11 * hYear) / 30) + ISLAMIC_EPOCH - 1;\n            var wjd = Math.floor(julianDay - 0.5) + 0.5, depoch = wjd - GREGORIAN_EPOCH, quadricent = Math.floor(depoch / 146097), dqc = mod(depoch, 146097), cent = Math.floor(dqc / 36524), dcent = mod(dqc, 36524), quad = Math.floor(dcent / 1461), dquad = mod(dcent, 1461), yindex = Math.floor(dquad / 365);\n            var year = quadricent * 400 + cent * 100 + quad * 4 + yindex;\n            if (!(cent === 4 || yindex === 4)) {\n                year++;\n            }\n            var gYearStart = GREGORIAN_EPOCH + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n                Math.floor((year - 1) / 400);\n            var yearday = wjd - gYearStart;\n            var tjd = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n                Math.floor((year - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(new Date(year, 3, 1)) ? -1 : -2) + 1);\n            var leapadj = wjd < tjd ? 0 : isGregorianLeapYear(new Date(year, 3, 1)) ? 1 : 2;\n            var month = Math.floor(((yearday + leapadj) * 12 + 373) / 367);\n            var tjd2 = GREGORIAN_EPOCH - 1 + 365 * (year - 1) + Math.floor((year - 1) / 4) - Math.floor((year - 1) / 100) +\n                Math.floor((year - 1) / 400) +\n                Math.floor((367 * month - 362) / 12 + (month <= 2 ? 0 : isGregorianLeapYear(new Date(year, month - 1, 1)) ? -1 : -2) +\n                    1);\n            var day = wjd - tjd2 + 1;\n            return new Date(year, month - 1, day);\n        };\n    /**\n     * Returns the number of days in a specific Hijri month.\n     * `month` is 1 for Muharram, 2 for Safar, etc.\n     * `year` is any Hijri year.\n     */\n    /**\n       * Returns the number of days in a specific Hijri month.\n       * `month` is 1 for Muharram, 2 for Safar, etc.\n       * `year` is any Hijri year.\n       */\n    NgbCalendarIslamicCivil.prototype.getDaysInIslamicMonth = /**\n       * Returns the number of days in a specific Hijri month.\n       * `month` is 1 for Muharram, 2 for Safar, etc.\n       * `year` is any Hijri year.\n       */\n        function (month, year) {\n            year = year + Math.floor(month / 13);\n            month = ((month - 1) % 12) + 1;\n            var length = 29 + month % 2;\n            if (month === 12 && this._isIslamicLeapYear(year)) {\n                length++;\n            }\n            return length;\n        };\n    NgbCalendarIslamicCivil.prototype.getNext = function (date, period, number) {\n        if (period === void 0) {\n            period = 'd';\n        }\n        if (number === void 0) {\n            number = 1;\n        }\n        date = NgbDate.from(date);\n        switch (period) {\n            case 'y':\n                date = this.setYear(date, date.year + number);\n                date.month = 1;\n                date.day = 1;\n                return date;\n            case 'm':\n                date = this.setMonth(date, date.month + number);\n                date.day = 1;\n                return date;\n            case 'd':\n                return this.setDay(date, date.day + number);\n            default:\n                return date;\n        }\n    };\n    NgbCalendarIslamicCivil.prototype.getPrev = function (date, period, number) {\n        if (period === void 0) {\n            period = 'd';\n        }\n        if (number === void 0) {\n            number = 1;\n        }\n        return this.getNext(date, period, -number);\n    };\n    NgbCalendarIslamicCivil.prototype.getWeekday = function (date) {\n        var day = this.toGregorian(date).getDay();\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        return day === 0 ? 7 : day;\n    };\n    NgbCalendarIslamicCivil.prototype.getWeekNumber = function (week, firstDayOfWeek) {\n        // in JS Date Sun=0, in ISO 8601 Sun=7\n        if (firstDayOfWeek === 7) {\n            firstDayOfWeek = 0;\n        }\n        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;\n        var date = week[thursdayIndex];\n        var jsDate = this.toGregorian(date);\n        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday\n        var time = jsDate.getTime();\n        var MuhDate = this.toGregorian(new NgbDate(date.year, 1, 1)); // Compare with Muharram 1\n        return Math.floor(Math.round((time - MuhDate.getTime()) / 86400000) / 7) + 1;\n    };\n    NgbCalendarIslamicCivil.prototype.getToday = function () { return this.fromGregorian(new Date()); };\n    return NgbCalendarIslamicCivil;\n}(NgbCalendarHijri));\nexport { NgbCalendarIslamicCivil };\n//# sourceMappingURL=ngb-calendar-islamic-civil.js.map\n",null]}