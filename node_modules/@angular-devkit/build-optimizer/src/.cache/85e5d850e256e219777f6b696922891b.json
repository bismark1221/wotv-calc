{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/angulartics2/dist/es5/core/angulartics2On.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/angulartics2/dist/es5/core/angulartics2On.js","mtime":1529481785433},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\n// import { getDOM } from '@angular/platform-browser/src/dom/dom_adapter';\nvar angulartics2_1 = require(\"./angulartics2\");\nvar Angulartics2On = /** @class */ /*@__PURE__*/ (function () {\n    function Angulartics2On(elRef, angulartics2, eventManager) {\n        this.elRef = elRef;\n        this.angulartics2 = angulartics2;\n        this.eventManager = eventManager;\n        this.el = this.elRef.nativeElement;\n    }\n    Angulartics2On.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        // Don't listen in server-side\n        if (this.isBrowser()) {\n            this.eventManager.addEventListener(this.el, this.angulartics2On || 'click', function (event) { return _this.eventTrack(event); });\n        }\n    };\n    Angulartics2On.prototype.isBrowser = function () {\n        return typeof (window) !== 'undefined';\n    };\n    Angulartics2On.prototype.eventTrack = function (event) {\n        var action = this.angularticsEvent; // || this.inferEventName();\n        var properties = {\n            eventType: event.type\n        };\n        if (this.angularticsCategory) {\n            properties.category = this.angularticsCategory;\n        }\n        // Allow components to pass through an expression that gets merged on to the event properties\n        // eg. angulartics-properites='myComponentScope.someConfigExpression.$angularticsProperties'\n        if (this.angularticsProperties) {\n            Object.assign(properties, this.angularticsProperties);\n        }\n        this.angulartics2.eventTrack.next({\n            action: action,\n            properties: properties\n        });\n    };\n    /*private isCommand() {\n      return ['a:', 'button:', 'button:button', 'button:submit', 'input:button', 'input:submit'].indexOf(\n        getDOM().tagName(this.el).toLowerCase() + ':' + (getDOM().type(this.el) || '')) >= 0;\n    }\n  \n    private inferEventName() {\n      if (this.isCommand()) return getDOM().getText(this.el) || getDOM().getValue(this.el);\n      return getDOM().getProperty(this.el, 'id') || getDOM().getProperty(this.el, 'name') || getDOM().tagName(this.el);\n    }*/\n    Angulartics2On.decorators = [\n        { type: core_1.Injectable },\n        { type: core_1.Directive, args: [{\n                    selector: '[angulartics2On]'\n                },] },\n    ];\n    Angulartics2On.propDecorators = {\n        'angulartics2On': [{ type: core_1.Input, args: ['angulartics2On',] },],\n        'angularticsEvent': [{ type: core_1.Input },],\n        'angularticsCategory': [{ type: core_1.Input },],\n        'angularticsProperties': [{ type: core_1.Input },],\n    };\n    return Angulartics2On;\n}());\nexports.Angulartics2On = Angulartics2On;\n",null]}