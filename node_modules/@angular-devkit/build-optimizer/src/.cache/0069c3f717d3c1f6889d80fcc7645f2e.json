{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-stack.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/modal/modal-stack.js","mtime":1529481784403},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["import { DOCUMENT } from '@angular/common';\nimport { ApplicationRef, Injectable, Injector, Inject, ReflectiveInjector, ComponentFactoryResolver, TemplateRef } from '@angular/core';\nimport { ContentRef } from '../util/popup';\nimport { isDefined, isString } from '../util/util';\nimport { NgbModalBackdrop } from './modal-backdrop';\nimport { NgbModalWindow } from './modal-window';\nimport { NgbActiveModal, NgbModalRef } from './modal-ref';\nvar NgbModalStack = /*@__PURE__*/ (function () {\n    function NgbModalStack(_applicationRef, _injector, _componentFactoryResolver, document) {\n        this._applicationRef = _applicationRef;\n        this._injector = _injector;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._windowAttributes = ['backdrop', 'centered', 'keyboard', 'size', 'windowClass'];\n        this._backdropAttributes = ['backdropClass'];\n        this._document = document;\n    }\n    NgbModalStack.prototype.open = function (moduleCFR, contentInjector, content, options) {\n        var containerEl = isDefined(options.container) ? this._document.querySelector(options.container) : this._document.body;\n        if (!containerEl) {\n            throw new Error(\"The specified modal container \\\"\" + (options.container || 'body') + \"\\\" was not found in the DOM.\");\n        }\n        var activeModal = new NgbActiveModal();\n        var contentRef = this._getContentRef(moduleCFR, options.injector || contentInjector, content, activeModal);\n        var backdropCmptRef = options.backdrop !== false ? this._attachBackdrop(containerEl) : null;\n        var windowCmptRef = this._attachWindowComponent(containerEl, contentRef);\n        var ngbModalRef = new NgbModalRef(windowCmptRef, contentRef, backdropCmptRef, options.beforeDismiss);\n        activeModal.close = function (result) { ngbModalRef.close(result); };\n        activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };\n        this._applyWindowOptions(windowCmptRef.instance, options);\n        if (backdropCmptRef && backdropCmptRef.instance) {\n            this._applyBackdropOptions(backdropCmptRef.instance, options);\n        }\n        return ngbModalRef;\n    };\n    NgbModalStack.prototype._attachBackdrop = function (containerEl) {\n        var backdropFactory = this._componentFactoryResolver.resolveComponentFactory(NgbModalBackdrop);\n        var backdropCmptRef = backdropFactory.create(this._injector);\n        this._applicationRef.attachView(backdropCmptRef.hostView);\n        containerEl.appendChild(backdropCmptRef.location.nativeElement);\n        return backdropCmptRef;\n    };\n    NgbModalStack.prototype._attachWindowComponent = function (containerEl, contentRef) {\n        var windowFactory = this._componentFactoryResolver.resolveComponentFactory(NgbModalWindow);\n        var windowCmptRef = windowFactory.create(this._injector, contentRef.nodes);\n        this._applicationRef.attachView(windowCmptRef.hostView);\n        containerEl.appendChild(windowCmptRef.location.nativeElement);\n        return windowCmptRef;\n    };\n    NgbModalStack.prototype._applyWindowOptions = function (windowInstance, options) {\n        this._windowAttributes.forEach(function (optionName) {\n            if (isDefined(options[optionName])) {\n                windowInstance[optionName] = options[optionName];\n            }\n        });\n    };\n    NgbModalStack.prototype._applyBackdropOptions = function (backdropInstance, options) {\n        this._backdropAttributes.forEach(function (optionName) {\n            if (isDefined(options[optionName])) {\n                backdropInstance[optionName] = options[optionName];\n            }\n        });\n    };\n    NgbModalStack.prototype._getContentRef = function (moduleCFR, contentInjector, content, context) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        else if (content instanceof TemplateRef) {\n            return this._createFromTemplateRef(content, context);\n        }\n        else if (isString(content)) {\n            return this._createFromString(content);\n        }\n        else {\n            return this._createFromComponent(moduleCFR, contentInjector, content, context);\n        }\n    };\n    NgbModalStack.prototype._createFromTemplateRef = function (content, context) {\n        var viewRef = content.createEmbeddedView(context);\n        this._applicationRef.attachView(viewRef);\n        return new ContentRef([viewRef.rootNodes], viewRef);\n    };\n    NgbModalStack.prototype._createFromString = function (content) {\n        var component = this._document.createTextNode(\"\" + content);\n        return new ContentRef([[component]]);\n    };\n    NgbModalStack.prototype._createFromComponent = function (moduleCFR, contentInjector, content, context) {\n        var contentCmptFactory = moduleCFR.resolveComponentFactory(content);\n        var modalContentInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgbActiveModal, useValue: context }], contentInjector);\n        var componentRef = contentCmptFactory.create(modalContentInjector);\n        this._applicationRef.attachView(componentRef.hostView);\n        return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);\n    };\n    return NgbModalStack;\n}());\nexport { NgbModalStack };\n//# sourceMappingURL=modal-stack.js.map\n",null]}