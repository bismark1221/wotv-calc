{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead-window.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead-window.js","mtime":1529481784524},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { toString } from '../util/util';\nvar NgbTypeaheadWindow = /*@__PURE__*/ (function () {\n    function NgbTypeaheadWindow() {\n        this.activeIdx = 0;\n        /**\n           * Flag indicating if the first row should be active initially\n           */\n        this.focusFirst = true;\n        /**\n           * A function used to format a given result before display. This function should return a formatted string without any\n           * HTML markup\n           */\n        this.formatter = toString;\n        /**\n           * Event raised when user selects a particular result row\n           */\n        this.selectEvent = new EventEmitter();\n        this.activeChangeEvent = new EventEmitter();\n    }\n    NgbTypeaheadWindow.prototype.hasActive = function () { return this.activeIdx > -1 && this.activeIdx < this.results.length; };\n    NgbTypeaheadWindow.prototype.getActive = function () { return this.results[this.activeIdx]; };\n    NgbTypeaheadWindow.prototype.markActive = function (activeIdx) {\n        this.activeIdx = activeIdx;\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.next = function () {\n        if (this.activeIdx === this.results.length - 1) {\n            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n        }\n        else {\n            this.activeIdx++;\n        }\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.prev = function () {\n        if (this.activeIdx < 0) {\n            this.activeIdx = this.results.length - 1;\n        }\n        else if (this.activeIdx === 0) {\n            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n        }\n        else {\n            this.activeIdx--;\n        }\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.resetActive = function () {\n        this.activeIdx = this.focusFirst ? 0 : -1;\n        this._activeChanged();\n    };\n    NgbTypeaheadWindow.prototype.select = function (item) { this.selectEvent.emit(item); };\n    NgbTypeaheadWindow.prototype.ngOnInit = function () { this.resetActive(); };\n    NgbTypeaheadWindow.prototype._activeChanged = function () {\n        this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\n    };\n    return NgbTypeaheadWindow;\n}());\nexport { NgbTypeaheadWindow };\n//# sourceMappingURL=typeahead-window.js.map\n",null]}