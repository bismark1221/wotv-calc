{"remainingRequest":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/data/www/ffbe-chain/node_modules/angulartics2/dist/es5/providers/ga/angulartics2-ga.js","dependencies":[{"path":"/data/www/ffbe-chain/node_modules/angulartics2/dist/es5/providers/ga/angulartics2-ga.js","mtime":1529481785440},{"path":"/data/www/ffbe-chain/node_modules/cache-loader/dist/cjs.js","mtime":1529481786296},{"path":"/data/www/ffbe-chain/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1529481776533}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar angulartics2_1 = require(\"../../core/angulartics2\");\nvar Angulartics2GoogleAnalytics = /** @class */ /*@__PURE__*/ (function () {\n    function Angulartics2GoogleAnalytics(angulartics2) {\n        var _this = this;\n        this.angulartics2 = angulartics2;\n        this.angulartics2.settings.pageTracking.trackRelativePath = true;\n        // Set the default settings for this module\n        this.angulartics2.settings.ga = {\n            // array of additional account names (only works for analyticsjs)\n            additionalAccountNames: [],\n            userId: null\n        };\n        this.angulartics2.pageTrack.subscribe(function (x) { return _this.pageTrack(x.path); });\n        this.angulartics2.eventTrack.subscribe(function (x) { return _this.eventTrack(x.action, x.properties); });\n        this.angulartics2.exceptionTrack.subscribe(function (x) { return _this.exceptionTrack(x); });\n        this.angulartics2.setUsername.subscribe(function (x) { return _this.setUsername(x); });\n        this.angulartics2.setUserProperties.subscribe(function (x) { return _this.setUserProperties(x); });\n        this.angulartics2.userTimings.subscribe(function (x) { return _this.userTimings(x); });\n    }\n    Angulartics2GoogleAnalytics.prototype.pageTrack = function (path) {\n        if (typeof _gaq !== 'undefined' && _gaq) {\n            _gaq.push(['_trackPageview', path]);\n            for (var _i = 0, _a = this.angulartics2.settings.ga.additionalAccountNames; _i < _a.length; _i++) {\n                var accountName = _a[_i];\n                _gaq.push([accountName + '._trackPageview', path]);\n            }\n            ;\n        }\n        if (typeof ga !== 'undefined' && ga) {\n            if (this.angulartics2.settings.ga.userId) {\n                ga('set', '&uid', this.angulartics2.settings.ga.userId);\n            }\n            ga('send', 'pageview', path);\n            for (var _b = 0, _c = this.angulartics2.settings.ga.additionalAccountNames; _b < _c.length; _b++) {\n                var accountName = _c[_b];\n                ga(accountName + '.send', 'pageview', path);\n            }\n            ;\n        }\n    };\n    /**\n     * Track Event in GA\n     * @name eventTrack\n     *\n     * @param {string} action Required 'action' (string) associated with the event\n     * @param {object} properties Comprised of the mandatory field 'category' (string) and optional  fields 'label' (string), 'value' (integer) and 'noninteraction' (boolean)\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide#SettingUpEventTracking\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n     */\n    Angulartics2GoogleAnalytics.prototype.eventTrack = function (action, properties) {\n        // Google Analytics requires an Event Category\n        if (!properties || !properties.category) {\n            properties = properties || {};\n            properties.category = 'Event';\n        }\n        // GA requires that eventValue be an integer, see:\n        // https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#eventValue\n        // https://github.com/luisfarzati/angulartics/issues/81\n        if (properties.value) {\n            var parsed = parseInt(properties.value, 10);\n            properties.value = isNaN(parsed) ? 0 : parsed;\n        }\n        if (typeof ga !== 'undefined') {\n            var eventOptions = {\n                eventCategory: properties.category,\n                eventAction: action,\n                eventLabel: properties.label,\n                eventValue: properties.value,\n                nonInteraction: properties.noninteraction,\n                page: properties.page || location.hash.substring(1) || location.pathname,\n                userId: this.angulartics2.settings.ga.userId,\n                hitCallback: properties.hitCallback\n            };\n            // add custom dimensions and metrics\n            this.setDimensionsAndMetrics(properties);\n            if (this.angulartics2.settings.ga.transport) {\n                ga('send', 'event', eventOptions, { transport: this.angulartics2.settings.ga.transport });\n            }\n            else {\n                ga('send', 'event', eventOptions);\n            }\n            for (var _i = 0, _a = this.angulartics2.settings.ga.additionalAccountNames; _i < _a.length; _i++) {\n                var accountName = _a[_i];\n                ga(accountName + '.send', 'event', eventOptions);\n            }\n        }\n        else if (typeof _gaq !== 'undefined') {\n            _gaq.push(['_trackEvent', properties.category, action, properties.label, properties.value, properties.noninteraction]);\n        }\n    };\n    /**\n     * Exception Track Event in GA\n     * @name exceptionTrack\n     *\n     * @param {object} properties Comprised of the optional fields:\n     *     'fatal' (string),\n     *     'description' (string)\n     *\n     * @https://developers.google.com/analytics/devguides/collection/analyticsjs/exceptions\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n     */\n    Angulartics2GoogleAnalytics.prototype.exceptionTrack = function (properties) {\n        if (properties.fatal === undefined) {\n            console.log('No \"fatal\" provided, sending with fatal=true');\n            properties.fatal = true;\n        }\n        properties.exDescription = properties.description;\n        var eventOptions = {\n            exFatal: properties.fatal,\n            exDescription: properties.description\n        };\n        ga('send', 'exception', eventOptions);\n    };\n    Angulartics2GoogleAnalytics.prototype.setUsername = function (userId) {\n        this.angulartics2.settings.ga.userId = userId;\n    };\n    Angulartics2GoogleAnalytics.prototype.setUserProperties = function (properties) {\n        this.setDimensionsAndMetrics(properties);\n    };\n    /**\n     * User Timings Event in GA\n     * @name userTimings\n     *\n     * @param {object} properties Comprised of the mandatory fields:\n     *     'timingCategory' (string),\n     *     'timingVar' (string),\n     *     'timingValue' (number)\n     * Properties can also have the optional fields:\n     *     'timingLabel' (string)\n     *\n     * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings\n     */\n    Angulartics2GoogleAnalytics.prototype.userTimings = function (properties) {\n        if (!properties || !properties.timingCategory || !properties.timingVar || !properties.timingValue) {\n            console.error('Properties timingCategory, timingVar, and timingValue are required to be set.');\n            return;\n        }\n        if (ga) {\n            ga('send', 'timing', properties);\n        }\n    };\n    Angulartics2GoogleAnalytics.prototype.setDimensionsAndMetrics = function (properties) {\n        if (ga) {\n            // add custom dimensions and metrics\n            for (var idx = 1; idx <= 200; idx++) {\n                if (properties['dimension' + idx.toString()]) {\n                    ga('set', 'dimension' + idx.toString(), properties['dimension' + idx.toString()]);\n                }\n                else {\n                    ga('set', 'dimension' + idx.toString(), undefined);\n                }\n                if (properties['metric' + idx.toString()]) {\n                    ga('set', 'metric' + idx.toString(), properties['metric' + idx.toString()]);\n                }\n                else {\n                    ga('set', 'metric' + idx.toString(), undefined);\n                }\n            }\n        }\n    };\n    Angulartics2GoogleAnalytics.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return Angulartics2GoogleAnalytics;\n}());\nexports.Angulartics2GoogleAnalytics = Angulartics2GoogleAnalytics;\n",null]}