{"version":3,"sources":["../../src/markdown/markdown.component.ts"],"names":[],"mappings":"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","file":"markdown.component.js","sourceRoot":"","sourcesContent":["import { Component, ElementRef, OnInit, AfterViewInit, Input } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { MarkdownService } from './markdown.service';\nimport './prism.languages';\n\n\nexport class MarkdownComponent implements OnInit {\n    private _path: string;\n    private _data: string;\n    private _md: any;\n    private _ext: string;\n    changeLog: string[] = [];\n\n    constructor(\n        private mdService: MarkdownService,\n        private el: ElementRef,\n        private http: Http\n    ) { }\n\n    ngOnInit() {\n\n    }\n\n    \n    set path(value:string) {\n      this._path = value;\n      this.onPathChange();\n    }\n\n    \n    set data(value:string) {\n      this._data = value;\n      this.onDataChange(value);\n    }\n\n\n    // on input\n    onDataChange(data:string){\n      this.el.nativeElement.innerHTML = this.mdService.compile(data);\n      Prism.highlightAll(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if(this._path) {\n        this.onPathChange();\n      } else {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(this.el.nativeElement.innerHTML);\n      this.el.nativeElement.innerHTML = this.mdService.compile(this._md);\n      Prism.highlightAll(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this.mdService.getContent(this._path)\n            .subscribe(data => {\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this.el.nativeElement.innerHTML = this.mdService.compile(this.prepare(this._md));\n                Prism.highlightAll(false);\n            },\n            err => this.handleError);\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Promise<any> {\n        console.error('An error occurred', error); // for demo purposes only\n        return Promise.reject(error.message || error);\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                if (this.trimLeft(line).substring(0, 3) === \"```\") {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'markdown,[Markdown]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }`\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MarkdownService, },\n{type: ElementRef, },\n{type: Http, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'path': [{ type: Input },],\n'data': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}